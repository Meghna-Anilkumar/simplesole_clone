<%- include('./sidebar') %>

<style>
  .coupon-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 20px;
    margin-left: 155px;
  }

  .coupon-box {
    width: calc(33.33% - 20px);
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 20px;
  }

  .pagination-container {
    margin: 20px 155px;
    text-align: center;
  }
</style>

<div class="content" style="margin-left: 150px;">
  <div class="container mt-3">
    <h2>Coupon Page</h2>
    <button class="btn btn-primary" id="openCouponModal" type="button" data-bs-toggle="modal" data-bs-target="#addCouponModal">
      <i class="fas fa-plus"></i> Add Coupon
    </button>
  </div>
</div>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCouponModalLabel">Add Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="couponCode" class="form-label">Coupon Code</label>
          <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code" required>
          <div id="couponCodeError" style="color: red;"></div>
        </div>
        <div class="mb-3">
          <label for="discountRate" class="form-label">Discount Rate (%)</label>
          <input type="number" class="form-control" id="discountRate" placeholder="Enter discount rate" required>
        </div>
        <div class="mb-3">
          <label for="minPurchaseAmount" class="form-label">Minimum Purchase Amount</label>
          <input type="number" class="form-control" id="minPurchaseAmount" placeholder="Enter minimum purchase amount" required>
        </div>
        <div class="mb-3">
          <label for="expiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="expiryDate" required>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="submitCouponBtn">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Coupon Details -->
<% if (coupons.length > 0) { %>
  <div id="couponDetails" class="coupon-container">
    <% function formatDate(dateString) {
      const date = new Date(dateString);
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return `${day}/${month}/${year}`;
    } %>
    <% coupons.forEach(coupon => { %>
      <div class="coupon-box">
        <p>Coupon Code: <%= coupon.couponCode %></p>
        <p>Discount Rate: <%= coupon.discountRate %>%</p>
        <p>Minimum Purchase Amount: <%= coupon.minimumPurchaseAmount %></p>
        <p>Expiry Date: <%= formatDate(coupon.expiryDate) %></p>
        <button class="btn btn-primary edit-coupon-btn" 
                data-bs-toggle="modal" 
                data-bs-target="#editCouponModal"
                data-coupon-id="<%= coupon._id %>"
                data-coupon-code="<%= coupon.couponCode %>"
                data-discount-rate="<%= coupon.discountRate %>"
                data-min-purchase-amount="<%= coupon.minimumPurchaseAmount %>"
                data-expiry-date="<%= coupon.expiryDate %>">Edit</button>
        <button class="btn btn-danger delete-coupon-btn" data-coupon-id="<%= coupon._id %>">Delete</button>
      </div>
    <% }) %>
  </div>

  <!-- Pagination Controls -->
  <% if (totalPages > 1) { %>
    <div class="pagination-container">
      <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
          </li>
          <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
            </li>
          <% } %>
          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
          </li>
        </ul>
      </nav>
    </div>
  <% } %>
<% } else { %>
  <div class="text-center" style="margin-top: 50px;">
    <h4>No coupons added yet.</h4>
    <p>Click the <strong>Add Coupon</strong> button above to create one.</p>
  </div>
<% } %>


<!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editCouponId">
        <div class="mb-3">
          <label for="editCouponCode" class="form-label">Coupon Code</label>
          <input type="text" class="form-control" id="editCouponCode" placeholder="Enter coupon code" required>
          <div id="editCouponCodeError" style="color: red;"></div>
        </div>
        <div class="mb-3">
          <label for="editDiscountRate" class="form-label">Discount Rate (%)</label>
          <input type="number" class="form-control" id="editDiscountRate" placeholder="Enter discount rate" required>
        </div>
        <div class="mb-3">
          <label for="editMinPurchaseAmount" class="form-label">Minimum Purchase Amount</label>
          <input type="number" class="form-control" id="editMinPurchaseAmount" placeholder="Enter minimum purchase amount" required>
        </div>
        <div class="mb-3">
          <label for="editExpiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="editExpiryDate" required>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="updateCouponBtn">Update</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const submitCouponBtn = document.getElementById('submitCouponBtn');

    submitCouponBtn.addEventListener('click', async function () {
      const couponCode = document.getElementById('couponCode');
      const discountRate = document.getElementById('discountRate');
      const minPurchaseAmount = document.getElementById('minPurchaseAmount');
      const expiryDate = document.getElementById('expiryDate');
      const couponCodeError = document.getElementById('couponCodeError');

      // Validate inputs
      const couponCodeValue = couponCode.value.trim();
      if (couponCodeValue === "") {
        couponCodeError.textContent = 'Coupon code cannot be empty.';
        return;
      } else if (couponCodeValue.indexOf(' ') !== -1) {
        couponCodeError.textContent = 'Coupon code cannot contain spaces.';
        return;
      } else {
        couponCodeError.textContent = '';
      }

      const discountRateValue = parseFloat(discountRate.value);
      if (isNaN(discountRateValue) || discountRateValue < 1 || discountRateValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Discount Rate',
          text: 'Discount rate should be between 1 and 100'
        });
        return;
      }

      const minPurchaseAmountValue = parseFloat(minPurchaseAmount.value);
      if (isNaN(minPurchaseAmountValue) || minPurchaseAmountValue < 0) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Minimum Purchase Amount',
          text: 'Minimum purchase amount must be a non-negative number'
        });
        return;
      }

      const expiryDateValue = new Date(expiryDate.value);
      const currentDate = new Date();
      currentDate.setHours(0, 0, 0, 0);
      if (expiryDateValue < currentDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Expiry Date',
          text: 'Expiry date cannot be before the current date'
        });
        return;
      }

      const formData = {
        couponCode: couponCodeValue,
        discountRate: discountRateValue,
        minPurchaseAmount: minPurchaseAmountValue,
        expiryDate: expiryDate.value
      };

      try {
        const response = await fetch('/submitcoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Coupon added successfully'
          });
          const modal = new bootstrap.Modal(document.getElementById('addCouponModal'));
          modal.hide();
          window.location.reload();
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to save coupon'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while saving the coupon'
        });
      }
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const editCouponBtns = document.querySelectorAll('.edit-coupon-btn');

    editCouponBtns.forEach(button => {
      button.addEventListener('click', function (event) {
        event.preventDefault();

        const couponId = this.getAttribute('data-coupon-id');
        const couponCode = this.getAttribute('data-coupon-code');
        const discountRate = this.getAttribute('data-discount-rate');
        const minPurchaseAmount = this.getAttribute('data-min-purchase-amount');
        const expiryDate = this.getAttribute('data-expiry-date');

        // Populate edit modal fields
        document.getElementById('editCouponId').value = couponId;
        document.getElementById('editCouponCode').value = couponCode;
        document.getElementById('editDiscountRate').value = discountRate;
        document.getElementById('editMinPurchaseAmount').value = minPurchaseAmount;
        document.getElementById('editExpiryDate').value = formatDateForInput(expiryDate);

        const editCouponModal = new bootstrap.Modal(document.getElementById('editCouponModal'));
        editCouponModal.show();
      });
    });

    function formatDateForInput(dateString) {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return '';
      return date.toISOString().split('T')[0];
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const updateCouponBtn = document.getElementById('updateCouponBtn');

    updateCouponBtn.addEventListener('click', async function () {
      const editCouponId = document.getElementById('editCouponId').value;
      const editCouponCode = document.getElementById('editCouponCode');
      const editDiscountRate = document.getElementById('editDiscountRate');
      const editMinPurchaseAmount = document.getElementById('editMinPurchaseAmount');
      const editExpiryDate = document.getElementById('editExpiryDate');
      const editCouponCodeError = document.getElementById('editCouponCodeError');

      // Validate inputs
      const couponCodeValue = editCouponCode.value.trim();
      if (couponCodeValue === "") {
        editCouponCodeError.textContent = 'Coupon code cannot be empty.';
        return;
      } else if (couponCodeValue.indexOf(' ') !== -1) {
        editCouponCodeError.textContent = 'Coupon code cannot contain spaces.';
        return;
      } else {
        editCouponCodeError.textContent = '';
      }

      const discountRateValue = parseFloat(editDiscountRate.value);
      if (isNaN(discountRateValue) || discountRateValue < 1 || discountRateValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Discount Rate',
          text: 'Discount rate should be between 1 and 100'
        });
        return;
      }

      const minPurchaseAmountValue = parseFloat(editMinPurchaseAmount.value);
      if (isNaN(minPurchaseAmountValue) || minPurchaseAmountValue < 0) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Minimum Purchase Amount',
          text: 'Minimum purchase amount must be a non-negative number'
        });
        return;
      }

      const expiryDateValue = new Date(editExpiryDate.value);
      const currentDate = new Date();
      currentDate.setHours(0, 0, 0, 0);
      if (expiryDateValue < currentDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Expiry Date',
          text: 'Expiry date cannot be before the current date'
        });
        return;
      }

      const formData = {
        editCouponId,
        editCouponCode: couponCodeValue,
        editDiscountRate: discountRateValue,
        editMinPurchaseAmount: minPurchaseAmountValue,
        editExpiryDate: editExpiryDate.value
      };

      try {
        const response = await fetch('/updatecoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Coupon updated successfully'
          });
          const editCouponModal = new bootstrap.Modal(document.getElementById('editCouponModal'));
          editCouponModal.hide();
          window.location.reload();
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to update coupon'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the coupon'
        });
      }
    });
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const deleteCouponBtns = document.querySelectorAll('.delete-coupon-btn');

    deleteCouponBtns.forEach(button => {
      button.addEventListener('click', async function (event) {
        event.preventDefault();

        const couponId = this.getAttribute('data-coupon-id');

        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'You are about to delete this coupon.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
          try {
            const response = await fetch(`/deletecoupon/${couponId}`, {
              method: 'POST'
            });

            const data = await response.json();

            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Coupon deleted successfully'
              });
              this.parentElement.remove();
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Failed to delete coupon'
              });
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while deleting the coupon'
            });
          }
        }
      });
    });
  });
</script>