<%- include('./sidebar') %>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
  }

  form {
    max-width: 600px;
    margin: auto;
  }

  label {
    display: block;
    margin-top: 10px;
  }

  input,
  select {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    margin-bottom: 10px;
    box-sizing: border-box;
  }

  button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .preview-container {
    display: inline-block;
    margin: 5px;
    position: relative;
  }

  .delete-button {
    position: absolute;
    top: 0;
    right: 0;
    background-color: red;
    color: white;
    border: none;
    padding: 2px 6px;
    cursor: pointer;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    line-height: 16px;
    text-align: center;
  }

  .error-message {
    color: red;
    font-size: 14px;
    margin-top: 5px;
  }

  .warning-message {
    color: orange;
    font-size: 14px;
    margin-top: 5px;
    font-weight: bold;
  }

  .image-section {
    border: 2px dashed #ccc;
    padding: 15px;
    margin: 10px 0;
    border-radius: 5px;
  }

  .modal-content {
    padding: 20px;
  }

  #cropper-container {
    max-width: 100%;
    max-height: 400px;
    margin-bottom: 10px;
  }

  #cropper-container img {
    max-width: 100%;
    max-height: 400px;
  }

  .cropper-buttons {
    display: flex;
    gap: 10px;
    margin-top: 10px;
  }

  #imageQueue {
    margin-top: 10px;
    font-size: 14px;
    color: #666;
  }

  .section-title {
    font-weight: bold;
    margin: 15px 0 10px 0;
    color: #333;
  }

  .images-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
</style>

<body>
  <div class="content">
    <form id="editProductForm" action="/updateProduct/<%= product._id %>" method="post" class="form-horizontal" enctype="multipart/form-data">
      <h2 style="color: blue;">Edit Product (<%= product.name %>)</h2>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name">NAME</label>
        <div class="col-md-8">
          <input id="product_name" name="name" placeholder="" class="form-control input-md" required="true" type="text"
            value="<%= product.name %>">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name_fr">DESCRIPTION</label>
        <div class="col-md-8">
          <input id="product_name_fr" name="description" placeholder="" class="form-control input-md" required=""
            type="text" value="<%= product.description %>">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_categorie">CATEGORY</label>
        <div class="col-md-4">
          <select id="product_categorie" name="category" class="form-control">
            <% category.forEach(cat => { %>
              <option value="<%= cat._id %>" <% if (product.category.equals(cat._id)) { %>selected<% } %>>
                <%= cat.name %>
              </option>
            <% }); %>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="price">PRICE</label>
        <div class="col-md-4">
          <input id="price" name="price" placeholder="" class="form-control input-md" required="true" type="number" min="0" step="0.01"
            value="<%= product.price %>">
        </div>
        <label class="col-md-4 control-label" for="stock">STOCK</label>
        <div class="col-md-4">
          <input id="stock" name="stock" placeholder="" class="form-control input-md" required="true" type="number" min="0"
            value="<%= product.stock %>">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="size">SIZE</label>
        <div class="col-md-4">
          <input id="size" name="size" placeholder="" class="form-control input-md" required="" type="text"
            value="<%= product.size %>">
        </div>
        <label class="col-md-4 control-label" for="color">COLOR</label>
        <div class="col-md-4">
          <input id="color" name="color" placeholder="" class="form-control input-md" required="" type="text"
            value="<%= product.color %>">
        </div>
      </div>

      <div class="form-group">
        <div class="image-section">
          <label class="col-md-4 control-label" for="filebutton">PRODUCT IMAGES</label>
          <div class="col-md-4">
            <input id="filebutton" name="images" class="input-file" type="file" multiple accept="image/*" onchange="openCropperModal(this)">
          </div>
          
          <div id="imageWarning" class="warning-message" style="display: none;">
            ⚠️ Products must have at least one image. Please upload new images or keep existing ones.
          </div>
          
          <div class="section-title">Current Images:</div>
          <div id="existingImages" class="images-grid">
            <% existingImages.forEach(image => { %>
              <div class="preview-container" data-image="<%= image %>">
                <img src="<%= image %>" style="width: 100px; height: 100px; object-fit: cover;">
                <button type="button" class="delete-button" onclick="removeExistingImage('<%= image %>')">×</button>
              </div>
            <% }); %>
          </div>
          
          <div class="section-title" id="newImagesTitle" style="display: none;">New Images:</div>
          <div id="newImagesPreview" class="images-grid">
            <!-- New cropped images will appear here -->
          </div>
        </div>
      </div>

      <!-- Hidden inputs -->
      <input type="hidden" name="deletedImages" id="deletedImages" value="">
      <input type="hidden" name="croppedImages" id="croppedImages" value="">

      <div class="form-group">
        <label class="col-md-4 control-label" for="singlebutton"></label>
        <div class="col-md-4">
          <button type="button" id="singlebutton" name="singlebutton" class="btn btn-primary">Update Product</button>
        </div>
      </div>
    </form>
  </div>

  <!-- Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="cropper-container">
            <img id="imageToCrop" src="" alt="Image to crop">
          </div>
          <div id="imageQueue">Images remaining: <span id="queueCount">0</span></div>
          <div class="cropper-buttons">
            <button type="button" id="cropButton" class="btn btn-primary">Crop and Next</button>
            <button type="button" id="skipButton" class="btn btn-warning">Skip</button>
            <button type="button" id="finishButton" class="btn btn-success">Finish Cropping</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css" rel="stylesheet">

  <script>
    let deletedImages = [];
    let croppedImages = [];
    let cropper;
    let fileQueue = [];
    let currentFileIndex = 0;
    let modal;

    // Cropping functionality
    function openCropperModal(input) {
      console.log('Opening cropper modal, files selected:', input.files.length);
      fileQueue = Array.from(input.files);
      currentFileIndex = 0;
      
      if (fileQueue.length > 0) {
        modal = new bootstrap.Modal(document.getElementById('cropperModal'), {
          backdrop: 'static',
          keyboard: false
        });
        processNextImage();
      } else {
        Swal.fire({
          icon: 'error',
          title: 'No Images',
          text: 'Please select at least one image to upload.',
        });
      }
    }

    function processNextImage() {
      console.log('Processing image', currentFileIndex + 1, 'of', fileQueue.length);
      
      if (currentFileIndex >= fileQueue.length) {
        console.log('All images processed, closing modal');
        if (modal) {
          modal.hide();
        }
        clearFileInput();
        return;
      }

      const currentFile = fileQueue[currentFileIndex];
      const reader = new FileReader();
      
      reader.onload = function (e) {
        const imageToCrop = document.getElementById('imageToCrop');
        imageToCrop.src = e.target.result;
        document.getElementById('queueCount').textContent = `${fileQueue.length - currentFileIndex}`;
        
        if (!modal._isShown) {
          modal.show();
        }

        // Wait for modal to be fully shown before initializing cropper
        document.getElementById('cropperModal').addEventListener('shown.bs.modal', initializeCropper, { once: true });
        
        if (modal._isShown) {
          initializeCropper();
        }
      };
      
      reader.readAsDataURL(currentFile);
    }

    function initializeCropper() {
      console.log('Initializing cropper for current image');
      
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      
      const imageToCrop = document.getElementById('imageToCrop');
      cropper = new Cropper(imageToCrop, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 0.8,
        responsive: true,
        checkCrossOrigin: false,
      });
    }

    function clearFileInput() {
      document.getElementById('filebutton').value = '';
      currentFileIndex = 0;
      fileQueue = [];
    }

    // Cropper button events
    document.getElementById('cropButton').addEventListener('click', async function () {
      console.log('Crop button clicked');
      
      if (!cropper) {
        console.error('Cropper not initialized');
        return;
      }

      const canvas = cropper.getCroppedCanvas({
        width: 300,
        height: 300,
      });

      canvas.toBlob(async (blob) => {
        const formData = new FormData();
        formData.append('croppedImage', blob, `cropped_${Date.now()}_${fileQueue[currentFileIndex].name}`);

        try {
          console.log('Uploading cropped image...');
          const response = await fetch('/upload-cropped-image', {
            method: 'POST',
            body: formData,
          });
          
          const result = await response.json();
          console.log('Upload response:', result);
          
          if (response.ok) {
            croppedImages.push(result.filename);
            document.getElementById('croppedImages').value = JSON.stringify(croppedImages);
            console.log('Total cropped images:', croppedImages.length);

            // Add to preview
            addNewImagePreview(result.filename);

            // Move to next image
            currentFileIndex++;
            
            if (cropper) {
              cropper.destroy();
              cropper = null;
            }
            
            processNextImage();
          } else {
            throw new Error(result.error || 'Upload failed');
          }
        } catch (error) {
          console.error('Error uploading cropped image:', error);
          Swal.fire({
            icon: 'error',
            title: 'Upload Failed',
            text: error.message || 'Failed to upload cropped image',
          });
        }
      }, 'image/jpeg', 0.8);
    });

    document.getElementById('skipButton').addEventListener('click', function () {
      console.log('Skip button clicked');
      
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      
      currentFileIndex++;
      processNextImage();
    });

    document.getElementById('finishButton').addEventListener('click', function () {
      console.log('Finish button clicked');
      
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      
      if (modal) {
        modal.hide();
      }
      
      clearFileInput();
    });

    // Modal event listeners
    document.getElementById('cropperModal').addEventListener('hidden.bs.modal', function () {
      console.log('Modal hidden');
      
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      
      clearFileInput();
    });

    function addNewImagePreview(imageUrl) {
      const newImagesPreview = document.getElementById('newImagesPreview');
      const newImagesTitle = document.getElementById('newImagesTitle');
      
      // Show the "New Images" title
      newImagesTitle.style.display = 'block';
      
      const previewDiv = document.createElement('div');
      previewDiv.className = 'preview-container';
      previewDiv.setAttribute('data-new-image', imageUrl);
      
      const img = document.createElement('img');
      img.src = imageUrl;
      img.style.width = '100px';
      img.style.height = '100px';
      img.style.objectFit = 'cover';
      img.alt = 'New product image preview';
      
      const deleteButton = document.createElement('button');
      deleteButton.className = 'delete-button';
      deleteButton.innerHTML = '×';
      deleteButton.type = 'button';
      deleteButton.onclick = function () {
        removeNewImage(imageUrl, previewDiv);
      };
      
      previewDiv.appendChild(img);
      previewDiv.appendChild(deleteButton);
      newImagesPreview.appendChild(previewDiv);
      
      checkImageCount();
    }

    function removeExistingImage(imageName) {
      deletedImages.push(imageName);
      document.getElementById('deletedImages').value = deletedImages.join(',');
      
      // Remove from DOM
      const existingImagesContainer = document.getElementById('existingImages');
      const containers = existingImagesContainer.getElementsByClassName('preview-container');
      for (let container of containers) {
        if (container.getAttribute('data-image') === imageName) {
          existingImagesContainer.removeChild(container);
          break;
        }
      }
      
      checkImageCount();
    }

    function removeNewImage(imageUrl, previewDiv) {
      // Remove from croppedImages array
      croppedImages = croppedImages.filter(url => url !== imageUrl);
      document.getElementById('croppedImages').value = JSON.stringify(croppedImages);
      
      // Remove from DOM
      previewDiv.remove();
      
      // Hide "New Images" title if no new images
      if (croppedImages.length === 0) {
        document.getElementById('newImagesTitle').style.display = 'none';
      }
      
      checkImageCount();
    }

    function checkImageCount() {
      const existingImagesCount = document.getElementById('existingImages').children.length;
      const newImagesCount = croppedImages.length;
      const totalImages = existingImagesCount + newImagesCount;
      
      const warningDiv = document.getElementById('imageWarning');
      const submitButton = document.getElementById('singlebutton');
      
      if (totalImages === 0) {
        warningDiv.style.display = 'block';
        submitButton.disabled = true;
        submitButton.style.backgroundColor = '#ccc';
      } else {
        warningDiv.style.display = 'none';
        submitButton.disabled = false;
        submitButton.style.backgroundColor = '#007bff';
      }
    }

    // Form validation and submission
    document.getElementById('singlebutton').addEventListener('click', function (event) {
      event.preventDefault();
      
      // Check image count first
      const existingImagesCount = document.getElementById('existingImages').children.length;
      const newImagesCount = croppedImages.length;
      
      if (existingImagesCount + newImagesCount === 0) {
        Swal.fire({
          icon: 'error',
          title: 'No Images',
          text: 'Product must have at least one image. Please upload new images or keep existing ones.',
        });
        return;
      }

      // Validate form fields
      if (!validateForm()) {
        return;
      }

      // Submit form
      document.getElementById('editProductForm').submit();
    });

    function validateForm() {
      const nameInput = document.getElementById('product_name');
      if (!validateName(nameInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Name',
          text: 'Please enter a valid product name.',
        });
        return false;
      }

      const priceInput = document.getElementById('price');
      if (!validatePrice(priceInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Price',
          text: 'Please enter a valid price greater than 0.',
        });
        return false;
      }

      const stockInput = document.getElementById('stock');
      if (!validateStock(stockInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Stock',
          text: 'Please enter a valid stock quantity (0 or greater).',
        });
        return false;
      }

      const sizeInput = document.getElementById('size');
      if (!validateSize(sizeInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Size',
          text: 'Please enter a valid size.',
        });
        return false;
      }

      const colorInput = document.getElementById('color');
      if (!validateColor(colorInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Color',
          text: 'Please enter a valid color.',
        });
        return false;
      }

      return true;
    }

    function validateName(name) {
      return name.trim() !== "" && name.trim().length >= 2;
    }

    function validatePrice(price) {
      const numericPrice = parseFloat(price);
      return !isNaN(numericPrice) && numericPrice > 0;
    }

    function validateStock(stock) {
      const numericStock = parseInt(stock, 10);
      return !isNaN(numericStock) && numericStock >= 0 && Number.isInteger(numericStock);
    }

    function validateSize(size) {
      return size.trim() !== "";
    }

    function validateColor(color) {
      return color.trim() !== "";
    }

    // Initial check on page load
    document.addEventListener('DOMContentLoaded', function() {
      checkImageCount();
    });
  </script>
</body>
</html>