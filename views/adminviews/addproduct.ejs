<%- include('./sidebar') %>
<style>
  /* Previous styles remain unchanged */
</style>
</head>
<body>
  <div class="content">
    <form action="/addProduct" method="POST" class="form-horizontal" enctype="multipart/form-data" id="productForm">
      <h2 style="color: blue;">Add New Product</h2>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name">NAME</label>
        <div class="col-md-8">
          <input id="product_name" name="name" class="form-control input-md" required type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name_fr">DESCRIPTION</label>
        <div class="col-md-8">
          <input id="product_name_fr" name="description" class="form-control input-md" required type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_categorie">CATEGORY</label>
        <div class="col-md-4">
          <select id="product_categorie" name="category" class="form-control" required>
            <% if (category && category.length > 0) { %>
              <% category.forEach(cat => { %>
                <option value="<%= cat._id %>"><%= cat.name %></option>
              <% }); %>
            <% } else { %>
              <option value="">No categories available</option>
            <% } %>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="price">PRICE</label>
        <div class="col-md-4">
          <input id="price" name="price" class="form-control input-md" required type="number" step="0.01" min="0.01">
        </div>
        <label class="col-md-4 control-label" for="stock">STOCK</label>
        <div class="col-md-4">
          <input id="stock" name="stock" class="form-control input-md" required type="number" min="0">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="size">SIZE (comma-separated, e.g., 7,8,9)</label>
        <div class="col-md-4">
          <input id="size" name="size" class="form-control input-md" required type="text" placeholder="7,8,9">
        </div>
        <label class="col-md-4 control-label" for="color">COLOR</label>
        <div class="col-md-4">
          <input id="color" name="color" class="form-control input-md" required type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="filebutton">IMAGES</label>
        <div class="col-md-4">
          <input id="filebutton" name="images" class="input-file" type="file" multiple accept="image/*" onchange="previewImages(this)">
        </div>
      </div>
      <div class="image-preview" id="imagePreview"></div>
      <input type="hidden" name="croppedImages" id="croppedImages">

      <div class="form-group">
        <label class="col-md-4 control-label" for="singlebutton"></label>
        <div class="col-md-4">
          <button id="singlebutton" name="singlebutton" class="btn btn-success" type="submit">Save Product</button>
        </div>
      </div>
    </form>
  </div>

  <!-- Cropper Modal -->
  <div id="cropperModal" class="modal">
    <div class="modal-content">
      <span class="close">Ã—</span>
      <div id="cropperContainer">
        <img id="cropperImage" src="#" alt="Crop">
      </div>
      <button id="doneButton">Done</button>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let croppedImageData = [];
    let currentFileIndex = null;

    function previewImages(input) {
      const previewContainer = document.getElementById('imagePreview');
      previewContainer.innerHTML = '';
      croppedImageData = [];
      const files = input.files;

      console.log('Selected files:', files.length, Array.from(files).map(f => f.name));

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = function (e) {
          const previewDiv = document.createElement('div');
          previewDiv.className = 'preview-container';

          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.width = '100px';
          img.style.height = '100px';
          img.dataset.index = i;
          img.onclick = function () {
            currentFileIndex = parseInt(this.dataset.index);
            openCropperModal(this.src);
          };

          const deleteButton = document.createElement('button');
          deleteButton.className = 'delete-button';
          deleteButton.innerHTML = 'X';
          deleteButton.onclick = function () {
            previewContainer.removeChild(previewDiv);
            croppedImageData.splice(croppedImageData.findIndex(item => item.index === i), 1);
            updateCroppedImagesInput();
          };

          previewDiv.appendChild(img);
          previewDiv.appendChild(deleteButton);
          previewContainer.appendChild(previewDiv);
        };

        reader.readAsDataURL(file);
      }
    }

    function openCropperModal(imageUrl) {
      const cropperModal = document.getElementById('cropperModal');
      const cropperImage = document.getElementById('cropperImage');
      cropperModal.style.display = 'block';
      cropperImage.src = imageUrl;

      window.cropper = new Cropper(cropperImage, {
        aspectRatio: 1 / 1,
        viewMode: 1,
        background: false,
        scalable: false,
        zoomable: false,
      });

      console.log('Cropper opened for image:', imageUrl);
    }

    document.getElementById('doneButton').addEventListener('click', function () {
      if (!window.cropper) return;

      const canvas = window.cropper.getCroppedCanvas();
      const croppedImage = canvas.toDataURL('image/jpeg');
      croppedImageData = croppedImageData.filter(item => item.index !== currentFileIndex);
      croppedImageData.push({ index: currentFileIndex, data: croppedImage });

      console.log('Cropped image added:', { index: currentFileIndex, data: croppedImage.substring(0, 50) + '...' });

      const previewContainer = document.getElementById('imagePreview');
      const imgElements = previewContainer.querySelectorAll('img');
      imgElements.forEach(img => {
        if (parseInt(img.dataset.index) === currentFileIndex) {
          img.src = croppedImage;
        }
      });

      updateCroppedImagesInput();

      document.getElementById('cropperModal').style.display = 'none';
      window.cropper.destroy();
      window.cropper = null;
    });

    function updateCroppedImagesInput() {
      const input = document.getElementById('croppedImages');
      input.value = JSON.stringify(croppedImageData.map(item => item.data));
      console.log('Updated croppedImages input:', input.value.substring(0, 50) + '...');
    }

    document.getElementsByClassName('close')[0].onclick = function () {
      document.getElementById('cropperModal').style.display = 'none';
      if (window.cropper) {
        window.cropper.destroy();
        window.cropper = null;
      }
      console.log('Cropper modal closed');
    };

    document.getElementById('productForm').addEventListener('submit', function (event) {
      event.preventDefault();

      const nameInput = document.getElementById('product_name');
      const priceInput = document.getElementById('price');
      const stockInput = document.getElementById('stock');
      const sizeInput = document.getElementById('size');
      const imageInput = document.getElementById('filebutton');
      const categorySelect = document.getElementById('product_categorie');

      console.log('Form submitted with data:', {
        name: nameInput.value,
        description: document.getElementById('product_name_fr').value,
        category: categorySelect.value,
        price: priceInput.value,
        stock: stockInput.value,
        size: sizeInput.value,
        color: document.getElementById('color').value,
        images: Array.from(imageInput.files).map(f => f.name),
        croppedImages: croppedImageData.length
      });

      if (!validateName(nameInput.value)) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please enter a valid name.' });
        return;
      }

      if (!validatePrice(priceInput.value)) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please enter a valid price.' });
        return;
      }

      if (!validateStock(stockInput.value)) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please enter a valid stock.' });
        return;
      }

      if (!validateSize(sizeInput.value)) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please enter valid sizes (e.g., 7,8,9).' });
        return;
      }

      if (!validateImage(imageInput)) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please select at least one image.' });
        return;
      }

      if (!categorySelect.value) {
        Swal.fire({ icon: 'error', title: 'Invalid input', text: 'Please select a category.' });
        return;
      }

      // Convert cropped images to blobs and append to form
      const formData = new FormData(this);
      croppedImageData.forEach((item, index) => {
        const blob = dataURLtoBlob(item.data);
        formData.append('images', blob, `cropped_${index}.jpg`);
      });

      console.log('Submitting form with FormData:', Array.from(formData.entries()).map(([key, value]) => ({ key, value: value instanceof File ? value.name : value })));

      fetch('/addProduct', {
        method: 'POST',
        body: formData
      })
        .then(response => {
          console.log('addProduct response status:', response.status);
          if (!response.ok) {
            throw new Error('Failed to add product: ' + response.status);
          }
          return response.json();
        })
        .then(data => {
          console.log('addProduct response:', data);
          Swal.fire({ icon: 'success', title: 'Success', text: 'Product added successfully!' });
          window.location.href = '/products';
        })
        .catch(error => {
          console.error('addProduct error:', error);
          Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to add product: ' + error.message });
        });
    });

    function dataURLtoBlob(dataURL) {
      const arr = dataURL.split(','), mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
      for (let i = 0; i < n; i++) {
        u8arr[i] = bstr.charCodeAt(i);
      }
      return new Blob([u8arr], { type: mime });
    }

    function validateName(name) {
      return name.trim() !== '';
    }

    function validatePrice(price) {
      const numericPrice = parseFloat(price);
      return !isNaN(numericPrice) && numericPrice > 0;
    }

    function validateStock(stock) {
      const numericStock = parseInt(stock, 10);
      return !isNaN(numericStock) && numericStock >= 0 && Number.isInteger(numericStock);
    }

    function validateSize(size) {
      const sizes = size.split(',').map(s => parseFloat(s.trim())).filter(s => !isNaN(s));
      return sizes.length > 0;
    }

    function validateImage(input) {
      return input.files.length > 0 || croppedImageData.length > 0;
    }
  </script>
</body>
</html>