<%- include('./sidebar') %>

<style>
  .offer-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 20px;
    margin-left: 155px;
  }

  .offer-box {
    width: calc(33.33% - 20px);
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 20px;
  }

  .pagination-container {
    margin: 20px 155px;
    text-align: center;
  }
</style>

<div class="content" style="margin-left: 150px;">
  <div class="container mt-3">
    <h2>Category Offer Page</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryOfferModal">
      Add Category Offer
    </button>
  </div>
</div>

<!-- Add Category Offer Modal -->
<div class="modal fade" id="addCategoryOfferModal" tabindex="-1" aria-labelledby="addCategoryOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCategoryOfferModalLabel">Add Category Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="categoryDropdown" class="form-label">Select Category</label>
          <select class="form-select" id="categoryDropdown" required>
            <option value="" selected disabled>Select a category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="discountPercentage" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="discountPercentage" placeholder="Enter discount percentage" min="1" max="100">
        </div>
        <div class="mb-3">
          <label for="startDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="startDate">
        </div>
        <div class="mb-3">
          <label for="expiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="expiryDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="submitCategoryOfferBtn">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Category Offer Details -->
<div id="categoryOfferDetails" class="offer-container">
  <% function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  } %>
  <% categoryOffers.forEach(categoryOffer => { %>
    <div class="offer-box">
      <p>Category: <%= categoryOffer.category.name %></p>
      <p>Discount Percentage: <%= categoryOffer.discountPercentage %>%</p>
      <p>Start Date: <%= formatDate(categoryOffer.startDate) %></p>
      <p>Expiry Date: <%= formatDate(categoryOffer.expiryDate) %></p>
      <button class="btn btn-primary edit-category-offer-btn"
              data-bs-toggle="modal"
              data-bs-target="#editCategoryOfferModal"
              data-offer-id="<%= categoryOffer._id %>"
              data-category-id="<%= categoryOffer.category._id %>"
              data-discount-percentage="<%= categoryOffer.discountPercentage %>"
              data-start-date="<%= categoryOffer.startDate %>"
              data-expiry-date="<%= categoryOffer.expiryDate %>">Edit</button>
      <button class="btn btn-danger delete-category-offer-btn" data-offer-id="<%= categoryOffer._id %>">Delete</button>
    </div>
  <% }) %>
</div>

<!-- Pagination Controls -->
<div class="pagination-container">
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
      </li>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
        </li>
      <% } %>
      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
      </li>
    </ul>
  </nav>
</div>

<!-- Edit Category Offer Modal -->
<div class="modal fade" id="editCategoryOfferModal" tabindex="-1" aria-labelledby="editCategoryOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editCategoryOfferModalLabel">Edit Category Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editCategoryOfferId">
        <div class="mb-3">
          <label for="editCategoryDropdown" class="form-label">Select Category</label>
          <select class="form-select" id="editCategoryDropdown">
            <option value="" disabled>Select a category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="editDiscountPercentage" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="editDiscountPercentage" placeholder="Enter discount percentage" min="1" max="100">
        </div>
        <div class="mb-3">
          <label for="editStartDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="editStartDate">
        </div>
        <div class="mb-3">
          <label for="editExpiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="editExpiryDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="updateCategoryOfferBtn">Update</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Format date for input fields
    const formatDateForInput = (dateString) => {
      const date = new Date(dateString);
      return isNaN(date.getTime()) ? '' : date.toISOString().split('T')[0];
    };

    // Reset form fields
    const resetAddOfferForm = () => {
      document.getElementById('categoryDropdown').value = '';
      document.getElementById('discountPercentage').value = '';
      document.getElementById('startDate').value = '';
      document.getElementById('expiryDate').value = '';
    };

    const resetEditOfferForm = () => {
      document.getElementById('editCategoryOfferId').value = '';
      document.getElementById('editCategoryDropdown').value = '';
      document.getElementById('editDiscountPercentage').value = '';
      document.getElementById('editStartDate').value = '';
      document.getElementById('editExpiryDate').value = '';
    };

    // Reset forms when modals are hidden
    const addCategoryOfferModal = document.getElementById('addCategoryOfferModal');
    const editCategoryOfferModal = document.getElementById('editCategoryOfferModal');

    addCategoryOfferModal.addEventListener('hidden.bs.modal', resetAddOfferForm);
    editCategoryOfferModal.addEventListener('hidden.bs.modal', resetEditOfferForm);

    // Populate edit modal
    editCategoryOfferModal.addEventListener('show.bs.modal', (event) => {
      const button = event.relatedTarget;
      if (!button.classList.contains('edit-category-offer-btn')) return;

      const offerId = button.getAttribute('data-offer-id');
      const categoryId = button.getAttribute('data-category-id');
      const discountPercentage = button.getAttribute('data-discount-percentage');
      const startDate = button.getAttribute('data-start-date');
      const expiryDate = button.getAttribute('data-expiry-date');

      document.getElementById('editCategoryOfferId').value = offerId;
      document.getElementById('editCategoryDropdown').value = categoryId;
      document.getElementById('editDiscountPercentage').value = discountPercentage;
      document.getElementById('editStartDate').value = formatDateForInput(startDate);
      document.getElementById('editExpiryDate').value = formatDateForInput(expiryDate);
    });

    // Add Category Offer
    document.getElementById('submitCategoryOfferBtn').addEventListener('click', async () => {
      const categoryId = document.getElementById('categoryDropdown').value;
      const discountPercentage = parseInt(document.getElementById('discountPercentage').value);
      const startDate = document.getElementById('startDate').value;
      const expiryDate = document.getElementById('expiryDate').value;

      // Client-side validation
      if (!categoryId) {
        Swal.fire({ icon: 'error', title: 'Missing Category', text: 'Please select a category' });
        return;
      }

      if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 100) {
        Swal.fire({ icon: 'error', title: 'Invalid Discount', text: 'Discount percentage must be between 1 and 100' });
        return;
      }

      if (!startDate) {
        Swal.fire({ icon: 'error', title: 'Missing Start Date', text: 'Please select a start date' });
        return;
      }

      if (!expiryDate) {
        Swal.fire({ icon: 'error', title: 'Missing Expiry Date', text: 'Please select an expiry date' });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(startDate);
      const selectedExpiryDate = new Date(expiryDate);

      if (isNaN(selectedStartDate.getTime()) || isNaN(selectedExpiryDate.getTime())) {
        Swal.fire({ icon: 'error', title: 'Invalid Date', text: 'Invalid date format' });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({ icon: 'error', title: 'Invalid Start Date', text: 'Start date cannot be in the past' });
        return;
      }

      if (selectedExpiryDate <= selectedStartDate) {
        Swal.fire({ icon: 'error', title: 'Invalid Expiry Date', text: 'Expiry date must be after start date' });
        return;
      }

      const formData = { categoryId, discountPercentage, startDate, expiryDate };

      try {
        const response = await fetch('/save-category-offer', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({ icon: 'success', title: 'Success', text: 'Category offer added successfully' });
          bootstrap.Modal.getInstance(addCategoryOfferModal).hide();
          setTimeout(() => window.location.reload(), 1500);
        } else {
          Swal.fire({ icon: 'error', title: 'Error', text: data.message || 'Failed to save category offer' });
        }
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while saving the offer' });
      }
    });

    // Update Category Offer
    document.getElementById('updateCategoryOfferBtn').addEventListener('click', async () => {
      const offerId = document.getElementById('editCategoryOfferId').value;
      const categoryId = document.getElementById('editCategoryDropdown').value;
      const discountPercentage = parseInt(document.getElementById('editDiscountPercentage').value);
      const startDate = document.getElementById('editStartDate').value;
      const expiryDate = document.getElementById('editExpiryDate').value;

      // Client-side validation
      if (!categoryId) {
        Swal.fire({ icon: 'error', title: 'Missing Category', text: 'Please select a category' });
        return;
      }

      if (isNaN(discountPercentage) || discountPercentage < 1 || discountPercentage > 100) {
        Swal.fire({ icon: 'error', title: 'Invalid Discount', text: 'Discount percentage must be between 1 and 100' });
        return;
      }

      if (!startDate) {
        Swal.fire({ icon: 'error', title: 'Missing Start Date', text: 'Please select a start date' });
        return;
      }

      if (!expiryDate) {
        Swal.fire({ icon: 'error', title: 'Missing Expiry Date', text: 'Please select an expiry date' });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(startDate);
      const selectedExpiryDate = new Date(expiryDate);

      if (isNaN(selectedStartDate.getTime()) || isNaN(selectedExpiryDate.getTime())) {
        Swal.fire({ icon: 'error', title: 'Invalid Date', text: 'Invalid date format' });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({ icon: 'error', title: 'Invalid Start Date', text: 'Start date cannot be in the past' });
        return;
      }

      if (selectedExpiryDate <= selectedStartDate) {
        Swal.fire({ icon: 'error', title: 'Invalid Expiry Date', text: 'Expiry date must be after start date' });
        return;
      }

      const formData = { offerId, categoryId, discountPercentage, startDate, expiryDate };

      try {
        const response = await fetch(`/update-category-offer/${offerId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({ icon: 'success', title: 'Success', text: 'Category offer updated successfully' });
          bootstrap.Modal.getInstance(editCategoryOfferModal).hide();
          setTimeout(() => window.location.reload(), 1500);
        } else {
          Swal.fire({ icon: 'error', title: 'Error', text: data.message || 'Failed to update category offer' });
        }
      } catch (error) {
        Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while updating the offer' });
      }
    });

    // Delete Category Offer
    document.querySelectorAll('.delete-category-offer-btn').forEach((button) => {
      button.addEventListener('click', async () => {
        const offerId = button.getAttribute('data-offer-id');

        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'You will not be able to recover this category offer!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!',
        });

        if (!result.isConfirmed) return;

        try {
          const response = await fetch(`/delete-category-offer/${offerId}`, {
            method: 'POST',
          });

          const data = await response.json();

          if (response.ok) {
            Swal.fire({ icon: 'success', title: 'Deleted!', text: 'Category offer has been deleted successfully' });
            button.closest('.offer-box').remove();
          } else {
            Swal.fire({ icon: 'error', title: 'Error', text: data.message || 'Failed to delete category offer' });
          }
        } catch (error) {
          Swal.fire({ icon: 'error', title: 'Error', text: 'An error occurred while deleting the offer' });
        }
      });
    });
  });
</script>