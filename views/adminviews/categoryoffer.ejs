<%- include('./sidebar') %>

<style>
  .offer-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 20px;
    margin-left: 155px;
  }

  .offer-box {
    width: calc(33.33% - 20px);
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 20px;
  }

  .pagination-container {
    margin: 20px 155px;
    text-align: center;
  }
</style>

<div class="content" style="margin-left: 150px;">
  <div class="container mt-3">
    <h2>Category Offer Page</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryOfferModal">Add Category Offer</button>
  </div>
</div>

<!-- Add Category Offer Modal -->
<div class="modal fade" id="addCategoryOfferModal" tabindex="-1" aria-labelledby="addCategoryOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCategoryOfferModalLabel">Add Category Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="categoryDropdown" class="form-label">Select Category</label>
          <select class="form-select" id="categoryDropdown" required>
            <option value="" selected disabled>Select a category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="discountPercentage" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="discountPercentage" placeholder="Enter discount percentage">
        </div>
        <div class="mb-3">
          <label for="startDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="startDate">
        </div>
        <div class="mb-3">
          <label for="expiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="expiryDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="submitCategoryOfferBtn">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Category Offer Details -->
<div id="categoryOfferDetails" class="offer-container">
  <% function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  } %>
  <% categoryOffers.forEach(categoryOffer => { %>
    <div class="offer-box">
      <p>Category: <%= categoryOffer.category.name %></p>
      <p>Discount Percentage: <%= categoryOffer.discountPercentage %>%</p>
      <p>Start Date: <%= formatDate(categoryOffer.startDate) %></p>
      <p>Expiry Date: <%= formatDate(categoryOffer.expiryDate) %></p>
      <button class="btn btn-primary edit-category-offer-btn" 
              data-bs-toggle="modal" 
              data-bs-target="#editCategoryOfferModal"
              data-category-offer-id="<%= categoryOffer._id %>"
              data-category-id="<%= categoryOffer.category._id %>"
              data-discount-percentage="<%= categoryOffer.discountPercentage %>"
              data-start-date="<%= categoryOffer.startDate %>"
              data-expiry-date="<%= categoryOffer.expiryDate %>">Edit</button>
      <button class="btn btn-danger delete-category-offer-btn" data-category-offer-id="<%= categoryOffer._id %>">Delete</button>
    </div>
  <% }) %>
</div>

<!-- Pagination Controls -->
<div class="pagination-container">
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
      </li>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
        </li>
      <% } %>
      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
      </li>
    </ul>
  </nav>
</div>

<!-- Edit Category Offer Modal -->
<div class="modal fade" id="editCategoryOfferModal" tabindex="-1" aria-labelledby="editCategoryOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editCategoryOfferModalLabel">Edit Category Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editCategoryOfferId">
        <div class="mb-3">
          <label for="editCategoryDropdown" class="form-label">Select Category</label>
          <select class="form-select" id="editCategoryDropdown">
            <option value="" disabled>Select a category</option>
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="editDiscountPercentage" class="form-label">Discount Percentage (%)</label>
          <input type="number" class="form-control" id="editDiscountPercentage" placeholder="Enter discount percentage">
        </div>
        <div class="mb-3">
          <label for="editStartDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="editStartDate">
        </div>
        <div class="mb-3">
          <label for="editExpiryDate" class="form-label">Expiry Date</label>
          <input type="date" class="form-control" id="editExpiryDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="updateCategoryOfferBtn">Update</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Function to reset form fields
    function resetAddOfferForm() {
      document.getElementById('categoryDropdown').value = '';
      document.getElementById('discountPercentage').value = '';
      document.getElementById('startDate').value = '';
      document.getElementById('expiryDate').value = '';
    }

    function resetEditOfferForm() {
      document.getElementById('editCategoryOfferId').value = '';
      const editDropdown = document.getElementById('editCategoryDropdown');
      editDropdown.selectedIndex = 0; // Reset to first option (disabled "Select a category")
      document.getElementById('editDiscountPercentage').value = '';
      document.getElementById('editStartDate').value = '';
      document.getElementById('editExpiryDate').value = '';
    }

    // Reset forms when modals are hidden
    const addCategoryOfferModal = document.getElementById('addCategoryOfferModal');
    const editCategoryOfferModal = document.getElementById('editCategoryOfferModal');

    addCategoryOfferModal.addEventListener('hidden.bs.modal', function () {
      resetAddOfferForm();
    });

    editCategoryOfferModal.addEventListener('hidden.bs.modal', function () {
      resetEditOfferForm();
    });

    // Handle edit modal show event to ensure proper population
    editCategoryOfferModal.addEventListener('show.bs.modal', function (event) {
      // Get the button that triggered the modal
      const button = event.relatedTarget;
      
      if (button && button.classList.contains('edit-category-offer-btn')) {
        const categoryOfferId = button.getAttribute('data-category-offer-id');
        const categoryId = button.getAttribute('data-category-id');
        const discountPercentage = button.getAttribute('data-discount-percentage');
        const startDate = button.getAttribute('data-start-date');
        const expiryDate = button.getAttribute('data-expiry-date');

        // Small delay to ensure modal is fully rendered
        setTimeout(() => {
          // Populate the edit modal fields
          document.getElementById('editCategoryOfferId').value = categoryOfferId;
          
          // Set the category dropdown value
          const editCategoryDropdown = document.getElementById('editCategoryDropdown');
          editCategoryDropdown.value = categoryId;
          
          // Force browser to update the display
          editCategoryDropdown.dispatchEvent(new Event('change', { bubbles: true }));
          
          document.getElementById('editDiscountPercentage').value = discountPercentage;
          document.getElementById('editStartDate').value = formatDateForInput(startDate);
          document.getElementById('editExpiryDate').value = formatDateForInput(expiryDate);

          console.log('Edit modal populated - Category ID:', categoryId);
          console.log('Selected option:', editCategoryDropdown.options[editCategoryDropdown.selectedIndex]?.text);
        }, 50);
      }
    });

    function formatDateForInput(dateString) {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return '';
      return date.toISOString().split('T')[0];
    }

    // Add Category Offer functionality
    const submitCategoryOfferBtn = document.getElementById('submitCategoryOfferBtn');

    submitCategoryOfferBtn.addEventListener('click', async function () {
      const categoryDropdown = document.getElementById('categoryDropdown');
      const discountPercentage = document.getElementById('discountPercentage');
      const startDate = document.getElementById('startDate');
      const expiryDate = document.getElementById('expiryDate');

      // Validate inputs
      if (!categoryDropdown.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Category',
          text: 'Please select a category'
        });
        return;
      }

      const discountValue = parseInt(discountPercentage.value);
      if (isNaN(discountValue) || discountValue < 1 || discountValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Discount Percentage',
          text: 'Percentage discount should be between 1 and 100'
        });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(startDate.value);
      const selectedExpiryDate = new Date(expiryDate.value);

      if (!startDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Start Date',
          text: 'Please select a start date'
        });
        return;
      }

      if (!expiryDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Expiry Date',
          text: 'Please select an expiry date'
        });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Start Date',
          text: 'Start date cannot be in the past'
        });
        return;
      }

      if (selectedExpiryDate <= selectedStartDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Expiry Date',
          text: 'Expiry date must be after the start date'
        });
        return;
      }

      const formData = {
        categoryId: categoryDropdown.value,
        discountPercentage: discountPercentage.value,
        startDate: startDate.value,
        expiryDate: expiryDate.value
      };

      try {
        const response = await fetch('/save-category-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Category offer added successfully'
          });
          const modal = bootstrap.Modal.getInstance(addCategoryOfferModal);
          modal.hide();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to save category offer'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while saving the offer'
        });
      }
    });

    // Edit Category Offer functionality
    const editCategoryOfferBtns = document.querySelectorAll('.edit-category-offer-btn');

    editCategoryOfferBtns.forEach(editCategoryOfferBtn => {
      editCategoryOfferBtn.addEventListener('click', function (event) {
        // The modal population is now handled by the 'show.bs.modal' event
        // This click handler is mainly for any additional logic if needed
        console.log('Edit button clicked for category offer:', this.getAttribute('data-category-offer-id'));
      });
    });

    // Update Category Offer functionality
    const updateCategoryOfferBtn = document.getElementById('updateCategoryOfferBtn');

    updateCategoryOfferBtn.addEventListener('click', async function () {
      const editCategoryOfferId = document.getElementById('editCategoryOfferId').value;
      const editCategoryDropdown = document.getElementById('editCategoryDropdown');
      const editDiscountPercentage = document.getElementById('editDiscountPercentage');
      const editStartDate = document.getElementById('editStartDate');
      const editExpiryDate = document.getElementById('editExpiryDate');

      // Validate inputs
      if (!editCategoryDropdown.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Category',
          text: 'Please select a category'
        });
        return;
      }

      const discountValue = parseInt(editDiscountPercentage.value);
      if (isNaN(discountValue) || discountValue < 1 || discountValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Discount Percentage',
          text: 'Percentage discount should be between 1 and 100'
        });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(editStartDate.value);
      const selectedExpiryDate = new Date(editExpiryDate.value);

      if (!editStartDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Start Date',
          text: 'Please select a start date'
        });
        return;
      }

      if (!editExpiryDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Expiry Date',
          text: 'Please select an expiry date'
        });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Start Date',
          text: 'Start date cannot be in the past'
        });
        return;
      }

      if (selectedExpiryDate <= selectedStartDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Expiry Date',
          text: 'Expiry date must be after the start date'
        });
        return;
      }

      const formData = {
        categoryId: editCategoryDropdown.value,
        discountPercentage: editDiscountPercentage.value,
        startDate: editStartDate.value,
        expiryDate: editExpiryDate.value
      };

      try {
        const response = await fetch(`/update-category-offer/${editCategoryOfferId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Category offer updated successfully'
          });
          const modal = bootstrap.Modal.getInstance(editCategoryOfferModal);
          modal.hide();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to update category offer'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the offer'
        });
      }
    });

    // Delete Category Offer functionality
    const deleteCategoryOfferBtns = document.querySelectorAll('.delete-category-offer-btn');

    deleteCategoryOfferBtns.forEach(deleteCategoryOfferBtn => {
      deleteCategoryOfferBtn.addEventListener('click', async function (event) {
        event.preventDefault();

        const categoryOfferId = this.getAttribute('data-category-offer-id');

        // Show confirmation dialog
        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'You will not be able to recover this category offer!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!'
        });

        if (!result.isConfirmed) {
          return;
        }

        try {
          const response = await fetch(`/delete-category-offer/${categoryOfferId}`, {
            method: 'POST'
          });

          const data = await response.json();

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Deleted!',
              text: 'Category offer has been deleted successfully'
            });
            this.closest('.offer-box').remove();
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to delete category offer'
            });
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while deleting the offer'
          });
        }
      });
    });
  });
</script>