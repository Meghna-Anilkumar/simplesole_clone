<%- include('./sidebar') %>

<style>
  .offer-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 20px;
    margin-left: 155px;
  }

  .offer-box {
    width: calc(33.33% - 20px);
    border: 1px solid #ccc;
    padding: 20px;
    margin-bottom: 20px;
  }

  .pagination-container {
    margin: 20px 155px;
    text-align: center;
  }
</style>

<div class="content" style="margin-left: 150px;">
  <div class="container mt-3">
    <h2>Product Offer Page</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addProductOfferModal">Add Product Offer</button>
  </div>
</div>

<!-- Add Product Offer Modal -->
<div class="modal fade" id="addProductOfferModal" tabindex="-1" aria-labelledby="addProductOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addProductOfferModalLabel">Add Product Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="productDropdown" class="form-label">Select Product</label>
          <select class="form-select" id="productDropdown">
            <option value="" selected disabled>Select a product</option>
            <% products.forEach(product => { %>
              <option value="<%= product._id %>"><%= product.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="offerPercentage" class="form-label">Offer Percentage (%)</label>
          <input type="number" class="form-control" id="offerPercentage" placeholder="Enter offer percentage">
        </div>
        <div class="mb-3">
          <label for="startDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="startDate">
        </div>
        <div class="mb-3">
          <label for="endDate" class="form-label">End Date</label>
          <input type="date" class="form-control" id="endDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="submitOfferBtn">Submit</button>
      </div>
    </div>
  </div>
</div>

<!-- Offer Details -->
<div id="offerDetails" class="offer-container">
  <% function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  } %>
  <% offers.forEach(offer => { %>
    <div class="offer-box">
      <p>Product: <%= offer.product.name %></p>
      <p>Discount Percentage: <%= offer.discountPercentage %>%</p>
      <p>Start Date: <%= formatDate(offer.startDate) %></p>
      <p>Expiry Date: <%= formatDate(offer.expiryDate) %></p>
      <button class="btn btn-primary edit-offer-btn" 
              data-bs-toggle="modal" 
              data-bs-target="#editOfferModal"
              data-offer-id="<%= offer._id %>"
              data-product-id="<%= offer.product._id %>"
              data-product-name="<%= offer.product.name %>"
              data-discount-percentage="<%= offer.discountPercentage %>"
              data-start-date="<%= offer.startDate %>"
              data-expiry-date="<%= offer.expiryDate %>">Edit</button>
      <button class="btn btn-danger delete-offer-btn" data-offer-id="<%= offer._id %>">Delete</button>
    </div>
  <% }) %>
</div>

<!-- Pagination Controls -->
<div class="pagination-container">
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
      </li>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
        </li>
      <% } %>
      <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
      </li>
    </ul>
  </nav>
</div>

<!-- Edit Offer Modal -->
<div class="modal fade" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editOfferModalLabel">Edit Product Offer</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editOfferId">
        <div class="mb-3">
          <label for="editProductDropdown" class="form-label">Select Product</label>
          <select class="form-select" id="editProductDropdown">
            <option value="" disabled>Select a product</option>
            <% products.forEach(product => { %>
              <option value="<%= product._id %>"><%= product.name %></option>
            <% }); %>
          </select>
        </div>
        <div class="mb-3">
          <label for="editOfferPercentage" class="form-label">Offer Percentage (%)</label>
          <input type="number" class="form-control" id="editOfferPercentage" placeholder="Enter offer percentage">
        </div>
        <div class="mb-3">
          <label for="editStartDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="editStartDate">
        </div>
        <div class="mb-3">
          <label for="editEndDate" class="form-label">End Date</label>
          <input type="date" class="form-control" id="editEndDate">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="updateOfferBtn">Update</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Function to reset form fields
    function resetAddOfferForm() {
      document.getElementById('productDropdown').value = '';
      document.getElementById('offerPercentage').value = '';
      document.getElementById('startDate').value = '';
      document.getElementById('endDate').value = '';
    }

    function resetEditOfferForm() {
      document.getElementById('editOfferId').value = '';
      document.getElementById('editProductDropdown').value = '';
      document.getElementById('editOfferPercentage').value = '';
      document.getElementById('editStartDate').value = '';
      document.getElementById('editEndDate').value = '';
    }

    // Reset forms when modals are hidden
    const addProductOfferModal = document.getElementById('addProductOfferModal');
    const editOfferModal = document.getElementById('editOfferModal');

    addProductOfferModal.addEventListener('hidden.bs.modal', function () {
      resetAddOfferForm();
    });

    editOfferModal.addEventListener('hidden.bs.modal', function () {
      resetEditOfferForm();
    });

    // Add Product Offer functionality
    const submitOfferBtn = document.getElementById('submitOfferBtn');

    submitOfferBtn.addEventListener('click', async function () {
      const productDropdown = document.getElementById('productDropdown');
      const offerPercentage = document.getElementById('offerPercentage');
      const startDate = document.getElementById('startDate');
      const endDate = document.getElementById('endDate');

      // Validate inputs
      if (!productDropdown.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Product',
          text: 'Please select a product'
        });
        return;
      }

      const offerPercentageValue = parseInt(offerPercentage.value);
      if (isNaN(offerPercentageValue) || offerPercentageValue < 1 || offerPercentageValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Offer Percentage',
          text: 'Percentage offer should be between 1 and 100'
        });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(startDate.value);
      const selectedEndDate = new Date(endDate.value);

      if (!startDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Start Date',
          text: 'Please select a start date'
        });
        return;
      }

      if (!endDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing End Date',
          text: 'Please select an end date'
        });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Start Date',
          text: 'Start date cannot be in the past'
        });
        return;
      }

      if (selectedEndDate <= selectedStartDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid End Date',
          text: 'End date must be after the start date'
        });
        return;
      }

      const formData = {
        productId: productDropdown.value,
        discountPercentage: offerPercentage.value,
        startDate: startDate.value,
        expiryDate: endDate.value
      };

      try {
        const response = await fetch('/save-product-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Product offer added successfully'
          });
          const modal = bootstrap.Modal.getInstance(addProductOfferModal);
          modal.hide();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to save product offer'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while saving the offer'
        });
      }
    });

    // Edit Product Offer functionality
    const editOfferBtns = document.querySelectorAll('.edit-offer-btn');

    editOfferBtns.forEach(editOfferBtn => {
      editOfferBtn.addEventListener('click', function (event) {
        event.preventDefault();

        const offerId = this.getAttribute('data-offer-id');
        const productId = this.getAttribute('data-product-id');
        const discountPercentage = this.getAttribute('data-discount-percentage');
        const startDate = this.getAttribute('data-start-date');
        const expiryDate = this.getAttribute('data-expiry-date');

        // Populate the edit modal fields
        document.getElementById('editOfferId').value = offerId;
        document.getElementById('editProductDropdown').value = productId;
        document.getElementById('editOfferPercentage').value = discountPercentage;
        document.getElementById('editStartDate').value = formatDateForInput(startDate);
        document.getElementById('editEndDate').value = formatDateForInput(expiryDate);
      });
    });

    function formatDateForInput(dateString) {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return '';
      return date.toISOString().split('T')[0];
    }

    // Update Product Offer functionality
    const updateOfferBtn = document.getElementById('updateOfferBtn');

    updateOfferBtn.addEventListener('click', async function () {
      const editOfferId = document.getElementById('editOfferId').value;
      const editProductDropdown = document.getElementById('editProductDropdown');
      const editOfferPercentage = document.getElementById('editOfferPercentage');
      const editStartDate = document.getElementById('editStartDate');
      const editEndDate = document.getElementById('editEndDate');

      // Validate inputs
      if (!editProductDropdown.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Product',
          text: 'Please select a product'
        });
        return;
      }

      const offerPercentageValue = parseInt(editOfferPercentage.value);
      if (isNaN(offerPercentageValue) || offerPercentageValue < 1 || offerPercentageValue > 100) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Offer Percentage',
          text: 'Percentage offer should be between 1 and 100'
        });
        return;
      }

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const selectedStartDate = new Date(editStartDate.value);
      const selectedEndDate = new Date(editEndDate.value);

      if (!editStartDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing Start Date',
          text: 'Please select a start date'
        });
        return;
      }

      if (!editEndDate.value) {
        Swal.fire({
          icon: 'error',
          title: 'Missing End Date',
          text: 'Please select an end date'
        });
        return;
      }

      if (selectedStartDate < today) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Start Date',
          text: 'Start date cannot be in the past'
        });
        return;
      }

      if (selectedEndDate <= selectedStartDate) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid End Date',
          text: 'End date must be after the start date'
        });
        return;
      }

      const formData = {
        offerId: editOfferId,
        productId: editProductDropdown.value,
        discountPercentage: editOfferPercentage.value,
        startDate: editStartDate.value,
        expiryDate: editEndDate.value
      };

      try {
        const response = await fetch('/update-product-offer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Product offer updated successfully'
          });
          const modal = bootstrap.Modal.getInstance(editOfferModal);
          modal.hide();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Failed to update product offer'
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An error occurred while updating the offer'
        });
      }
    });

    // Delete Product Offer functionality
    const deleteOfferBtns = document.querySelectorAll('.delete-offer-btn');

    deleteOfferBtns.forEach(deleteOfferBtn => {
      deleteOfferBtn.addEventListener('click', async function (event) {
        event.preventDefault();

        const offerId = this.getAttribute('data-offer-id');

        // Show confirmation dialog
        const result = await Swal.fire({
          title: 'Are you sure?',
          text: 'You will not be able to recover this product offer!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, delete it!'
        });

        if (!result.isConfirmed) {
          return;
        }

        try {
          const response = await fetch(`/delete-product-offer/${offerId}`, {
            method: 'POST'
          });

          const data = await response.json();

          if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Deleted!',
              text: 'Product offer has been deleted successfully'
            });
            this.closest('.offer-box').remove();
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: data.message || 'Failed to delete product offer'
            });
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while deleting the offer'
          });
        }
      });
    });
  });
</script>