<%- include('./header') %>

<style>
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: "Josefin Sans", sans-serif;
    background-color: #f6f9fc;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  header {
    background-image: url("../images/pattern.png");
    padding: 20px 0;
    background-color: #f6f9fc;
  }

  .navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
  }

  .logo {
    font-size: 24px;
    font-weight: 700;
    display: flex;
    align-items: center;
    color: #246eea;
  }

  .logo .icon {
    font-size: 28px;
    margin-right: 8px;
  }

  .secure {
    display: flex;
    align-items: center;
    color: #afb5c0;
    font-size: 14px;
  }

  .secure .icon {
    font-size: 18px;
    margin-right: 5px;
  }

  .notification {
    font-size: 24px;
    font-weight: 600;
    text-align: center;
    margin: 20px 0;
    color: #333;
  }

  .summary {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .summary h5 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
  }

  .summary hr {
    border: 0;
    border-top: 1px solid #e1e8ee;
    margin: 15px 0;
  }

  .summary .row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    font-size: 14px;
    color: #5e6977;
  }

  .summary .item-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #e1e8ee;
  }

  .summary .item-row:last-child {
    border-bottom: none;
  }

  .summary .item-details {
    flex: 1;
  }

  .summary .item-details p {
    margin: 0;
    font-size: 14px;
    color: #333;
  }

  .summary .item-details .size {
    font-size: 12px;
    color: #5e6977;
  }

  .summary .item-price {
    font-weight: 600;
    color: #333;
  }

  .summary .total-row {
    font-weight: 600;
    font-size: 16px;
    color: #333;
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #e1e8ee;
  }

  .coupon-section {
    margin-top: 20px;
  }

  .coupon-section p {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 10px;
  }

  .coupon-input-group {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .coupon-input-group input {
    flex: 1;
    padding: 10px;
    border: 2px solid #e1e8ee;
    border-radius: 5px;
    font-size: 14px;
    color: #5e6977;
  }

  .coupon-input-group button {
    padding: 10px 20px;
    font-size: 14px;
  }

  .coupon-container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin-top: 20px;
  }

  .coupon {
    flex: 1 1 200px;
    border: 2px solid #ff69b4;
    border-radius: 8px;
    padding: 15px;
    background-color: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .coupon p {
    font-size: 13px;
    margin-bottom: 8px;
    color: #333;
  }

  .payment__shipping {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }

  .payment__title {
    font-size: 18px;
    font-weight: 600;
    display: flex;
    align-items: center;
    margin-bottom: 15px;
  }

  .payment__title .icon {
    margin-right: 10px;
    font-size: 20px;
  }

  .addresses-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .details__user {
    background: #f6f9fc;
    padding: 15px;
    border-radius: 8px;
    border: 1px solid #e1e8ee;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .details__user input[type="radio"] {
    margin-right: 10px;
  }

  .user__name {
    font-size: 14px;
    color: #333;
  }

  .payment {
    background-color: #fff;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .payment__types {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
  }

  .payment__type {
    flex: 1;
    border: 2px solid #d9d9d9;
    border-radius: 8px;
    padding: 10px;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .payment__type:hover {
    transform: translateY(-2px);
    border-color: #246eea;
  }

  .payment__type.active {
    border-color: #246eea;
    background-color: #f6f9fc;
  }

  .payment__type.disabled {
    border-color: #e1e8ee;
    background-color: #f0f0f0;
    cursor: not-allowed;
  }

  .payment__type.disabled label {
    color: #999;
    cursor: not-allowed;
  }

  .payment__type label {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: 600;
    color: #333;
  }

  .payment__type .icon {
    font-size: 24px;
    margin-right: 8px;
  }

  .error-message {
    color: #ff3f6c;
    font-size: 12px;
    margin-top: 5px;
  }

  .btn {
    display: inline-block;
    padding: 12px 30px;
    border-radius: 5px;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .button-base-button {
    background-color: #ff3f6c;
    color: #fff;
    border: none;
    cursor: pointer;
  }

  .button-base-button:hover {
    background-color: #e6355e;
    transform: translateY(-1px);
  }

  .css-huh2rh {
    background-color: #6f42c1;
    color: #fff;
    border: none;
    padding: 8px 16px;
    font-size: 12px;
    font-weight: 600;
    border-radius: 5px;
  }

  .backBtn {
    color: #a0a0a0;
    font-size: 14px;
    margin-top: 15px;
    display: inline-block;
  }

  .alert {
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 5px;
  }

  @media (max-width: 767px) {
    .container {
      padding: 15px;
    }

    .summary {
      border-radius: 5px;
    }

    .payment__types {
      flex-direction: column;
    }

    .payment__type {
      width: 100%;
    }

    .coupon-container {
      flex-direction: column;
    }

    .summary .item-row {
      flex-direction: column;
      align-items: flex-start;
    }

    .summary .item-price {
      margin-top: 5px;
    }
  }
</style>

<div class="container">
  <header>
    <div class="navigation">
      <div class="logo"><i class="icon icon-basket"></i> Simple Sole</div>
      <div class="secure"><i class="icon icon-shield"></i> Secure Checkout</div>
    </div>
    <div class="notification">Complete Your Purchase</div>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <%= error %>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="alert"
          aria-label="Close"
        ></button>
      </div>
    <% } %>
  </header>

  <div class="summary">
    <h5><b>Order Summary</b></h5>
    <hr />
    <% if (cart && cart.items && cart.items.length > 0) { %>
      <% cart.items.forEach(item => { %>
        <div class="item-row">
          <div class="item-details">
            <p><%= item.product.name %></p>
            <p class="size">Size: <%= item.size %> | Quantity: <%= item.quantity %></p>
          </div>
          <div class="item-price">
            ₹<%= (item.price * item.quantity).toFixed(2) %>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <p>No items in cart.</p>
    <% } %>
    <div class="row">
      <div>Items (<%= cart.items.length %>)</div>
      <div>₹<%= cart.total.toFixed(2) %></div>
    </div>
    <div class="row">
      <div>Coupon Discount</div>
      <div>-₹<span id="discount"><%= discount.toFixed(2) %></span></div>
    </div>
    <div class="coupon-section">
      <p>Apply Coupon</p>
      <div class="coupon-input-group">
        <input id="code" placeholder="Enter coupon code" name="couponcode" value="<%= cart.couponApplied || '' %>" />
        <button id="applyCouponBtn" class="button-base-button" data-applied="<%= cart.couponApplied ? 'true' : 'false' %>">
          <%= cart.couponApplied ? 'Remove' : 'Apply' %>
        </button>
      </div>
    </div>
    <div class="row total-row">
      <div>Total Price</div>
      <div>₹<span id="newTotal"><%= (cart.newTotal || cart.total).toFixed(2) %></span></div>
    </div>
    <button id="viewCouponsBtn" class="button-base-button" style="margin-top: 15px">
      View Available Coupons
    </button>
    <div class="coupon-container" id="couponsContainer"></div>
  </div>

  <div class="payment__shipping">
    <div class="payment__title">
      <i class="icon icon-plane"></i> Shipping Address
    </div>
    <button class="css-huh2rh" id="openAddressModal" type="button">
      <i class="fas fa-plus"></i> Add Address
    </button>
    <%- include('./addaddress') %>
    <div class="addresses-container">
      <% addresses.forEach(address => { %>
        <div class="details__user" id="<%= 'user_' + address._id %>">
          <input
            type="radio"
            name="selectedAddress"
            id="<%= 'radio_' + address._id %>"
            value="<%= address._id %>"
          />
          <div class="user__name">
            <%= address.name %><br />
            <%= address.buildingname %>, <%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.pincode %><br />
            Type: <%= address.addresstype %>
          </div>
        </div>
      <% }); %>
    </div>
  </div>
 <div class="modal fade" id="stockIssueModal" tabindex="-1" aria-labelledby="stockIssueModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="stockIssueModalLabel">Stock Unavailable</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>The following items are unavailable:</p>
          <ul id="unavailableItemsList"></ul>
          <p>Please update your cart and try again.</p>
        </div>
        <div class="modal-footer">
          <a href="/cart" class="btn btn-primary">Go to Cart</a>
        </div>
      </div>
    </div>
  </div>
  <div class="payment">
    <div class="payment__title">
      <i class="icon icon-credit-card"></i> Payment Method
    </div>
    <form action="/placeOrder" method="post" id="checkoutForm">
      <input
        type="hidden"
        id="appliedCouponCode"
        name="appliedCouponCode"
        value="<%= cart.couponApplied || '' %>"
      />
      <input
        type="hidden"
        id="selectedAddressInput"
        name="selectedAddress"
        value=""
      />
      <div class="payment__types">
        <div class="payment__type payment__type--cc <%= cart.total > 1000 ? 'disabled' : '' %>">
          <input
            type="radio"
            name="paymentMethod"
            id="paymentCC"
            value="CASH_ON_DELIVERY"
            <%= cart.total > 1000 ? 'disabled' : '' %>
          />
          <label for="paymentCC">
            <i class="icon icon-credit-card"></i>Cash on Delivery
          </label>
          <% if (cart.total > 1000) { %>
            <div class="error-message">
              COD not available for orders above ₹1000
            </div>
          <% } %>
        </div>
        <div class="payment__type payment__type--paypal">
          <input
            type="radio"
            name="paymentMethod"
            id="paymentWallet"
            value="WALLET"
          />
          <label for="paymentWallet">
            <i class="icon icon-paypal"></i>Wallet
          </label>
        </div>
        <div class="payment__type payment__type--paypal">
          <input
            type="radio"
            name="paymentMethod"
            id="paymentRazorpay"
            value="RAZORPAY"
          />
          <label for="paymentRazorpay">
            <i class="icon icon-wallet"></i>Razorpay
          </label>
        </div>
      </div>
      <button type="submit" class="button-base-button" id="placeorderButton">
        Place Order <i class="icon icon-arrow-right-circle"></i>
      </button>
    </form>
    <a href="#" class="backBtn">Back to Shop</a>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.getElementById("openAddressModal").addEventListener("click", function () {
    $("#addressModal").modal("show");
  });

  document.getElementById("addressForm").addEventListener("submit", function (event) {
  event.preventDefault();
  const addressData = {
    addressName: document.getElementById("addressName").value,
    mobileNumber: document.getElementById("mobileNumber").value,
    buildingname: document.getElementById("buildingname").value,
    street: document.getElementById("street").value,
    city: document.getElementById("city").value,
    state: document.getElementById("state").value,
    PINCode: document.getElementById("PIN Code").value,
    addressType: document.querySelector('input[name="addressType"]:checked').value,
  };
  fetch("/saveAddress", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(addressData),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log("Address saved:", data);
      document.getElementById("addressForm").reset();
      $("#addressModal").modal("hide");
      window.location.reload();
    })
    .catch((error) => console.error("Error saving address:", error));
});

  document.getElementById("checkoutForm").addEventListener("submit", async function (event) {
    event.preventDefault();

    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
    const appliedCouponCode = document.getElementById("appliedCouponCode").value;

    if (!selectedAddress) {
      Swal.fire({
        text: "Please select a shipping address.",
        icon: "error",
      });
      return;
    }

    if (!selectedPaymentMethod) {
      Swal.fire({
        text: "Please select a payment method.",
        icon: "error",
      });
      return;
    }

    document.getElementById("selectedAddressInput").value = selectedAddress.value;

    if (selectedPaymentMethod.value === "RAZORPAY") {
      try {
        const cartResponse = await fetch("/getCartTotal", {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
        const cartData = await cartResponse.json();

        if (!cartData.success) {
          Swal.fire({
            text: "Error fetching cart total.",
            icon: "error",
          });
          return;
        }

        const amountInRupees = cartData.newTotal || cartData.total;

        const orderResponse = await fetch("/createRazorpayOrder", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount: amountInRupees }),
        });
        const orderData = await orderResponse.json();

        if (!orderData.success) {
          Swal.fire({
            text: orderData.error || "Error creating Razorpay order.",
            icon: "error",
          });
          return;
        }

        var options = {
          key: "rzp_test_RXM5ojGKCHke94",
          amount: orderData.amount,
          currency: "INR",
          name: "Simple Sole",
          description: "Test Transaction",
          image: "https://example.com/your_logo",
          order_id: orderData.orderId,
          handler: function (response) {
            fetch("/process-payment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                payment_id: response.razorpay_payment_id,
                order_id: orderData.orderId,
                signature: response.razorpay_signature,
                paymentMethod: selectedPaymentMethod.value,
                selectedAddress: selectedAddress.value,
                appliedCouponCode: appliedCouponCode,
              }),
            })
              .then((response) => response.json())
              .then((data) => {
                console.log("Payment details sent to the server:", data);
                if (data.success) {
                  window.location.href = "/successpage";
                } else {
                  Swal.fire({
                    text: data.error || "Payment processing failed.",
                    icon: "error",
                  });
                }
              })
              .catch((error) => {
                console.error("Error sending payment details to the server:", error);
                Swal.fire({
                  text: "Error processing payment. Please try again.",
                  icon: "error",
                });
              });
          },
          notes: { address: "Razorpay Corporate Office" },
          theme: { color: "#3399cc" },
        };

        var rzp1 = new Razorpay(options);
        rzp1.on("payment.failed", function (response) {
          Swal.fire({
            text: `Payment failed: ${response.error.description}`,
            icon: "error",
          });
        });
        rzp1.open();
      } catch (error) {
        console.error("Error processing payment:", error);
        Swal.fire({
          text: "Error processing payment. Please try again.",
          icon: "error",
        });
      }
    } else {
      this.submit();
    }
  });

  document.addEventListener("DOMContentLoaded", async function () {
    const viewCouponsBtn = document.getElementById("viewCouponsBtn");
    const couponsContainer = document.getElementById("couponsContainer");
    viewCouponsBtn.addEventListener("click", async () => {
      try {
        const response = await fetch("/coupons");
        const coupons = await response.json();
        couponsContainer.innerHTML = "";
        coupons.forEach((coupon) => {
          const couponDiv = document.createElement("div");
          couponDiv.classList.add("coupon");
          couponDiv.innerHTML = `
            <p>Coupon Code: ${coupon.couponCode}</p>
            <p>Discount Rate: ${coupon.discountRate}%</p>
            <p>Minimum Purchase Amount: ${coupon.minimumPurchaseAmount}</p>
            <p>Expiry Date: ${formatDate(coupon.expiryDate)}</p>
            <button class="button-base-button apply-coupon-btn" data-code="${coupon.couponCode}">Apply Coupon</button>
          `;
          couponsContainer.appendChild(couponDiv);
        });

        // Add event listeners to apply coupon buttons
        document.querySelectorAll(".apply-coupon-btn").forEach((btn) => {
          btn.addEventListener("click", () => {
            document.getElementById("code").value = btn.dataset.code;
            document.getElementById("applyCouponBtn").click();
          });
        });
      } catch (error) {
        console.error("Error fetching coupons:", error);
        Swal.fire({
          text: "Error fetching coupons.",
          icon: "error",
        });
      }
    });

    function formatDate(date) {
      return new Date(date).toLocaleDateString();
    }

    const applyCouponBtn = document.getElementById("applyCouponBtn");
    const newTotalSpan = document.getElementById("newTotal");
    const discountSpan = document.getElementById("discount");
    const appliedCouponCodeInput = document.getElementById("appliedCouponCode");
    const couponInput = document.getElementById("code");

    applyCouponBtn.addEventListener("click", async () => {
      const couponCode = couponInput.value.trim();
      const applied = applyCouponBtn.dataset.applied === "true";

      try {
        if (applied) {
          // Remove coupon
          const response = await fetch("/removeCoupon", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const data = await response.json();
          if (data.success) {
            applyCouponBtn.innerText = "Apply";
            applyCouponBtn.dataset.applied = "false";
            newTotalSpan.innerText = data.newTotal.toFixed(2);
            discountSpan.innerText = "0.00";
            appliedCouponCodeInput.value = "";
            couponInput.value = "";
            Swal.fire({
              text: "Coupon removed successfully.",
              icon: "success",
            });
          } else {
            Swal.fire({
              text: data.message || "Error removing coupon.",
              icon: "error",
            });
          }
        } else {
          // Apply coupon
          if (!couponCode) {
            Swal.fire({
              text: "Please enter a coupon code.",
              icon: "error",
            });
            return;
          }
          const response = await fetch("/applyCoupon", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ couponCode }),
          });
          const data = await response.json();
          if (data.success) {
            applyCouponBtn.innerText = "Remove";
            applyCouponBtn.dataset.applied = "true";
            newTotalSpan.innerText = data.newTotal.toFixed(2);
            discountSpan.innerText = data.discount.toFixed(2);
            appliedCouponCodeInput.value = couponCode;
            Swal.fire({
              text: "Coupon applied successfully.",
              icon: "success",
            });
          } else {
            Swal.fire({
              text: data.message || "Coupon not applicable.",
              icon: "error",
            });
          }
        }
      } catch (error) {
        console.error("Error applying/removing coupon:", error);
        Swal.fire({
          text: "Error applying/removing coupon. Please try again later.",
          icon: "error",
        });
      }
    });
  });
</script>
<%- include('./footer') %>