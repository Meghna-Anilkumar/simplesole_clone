<%- include('./header', { title: 'Product Details', category: category, selectedCategory: selectedCategory }) %>

<style>
  /* Existing styles unchanged */
  #navbar {
    padding-right: 50px;
    background-color: black;
  }
  .nav-link:not(:last-child) {
    color: white;
    margin-right: 10px;
  }
  #signupbody, #loginbody {
    padding-top: 50px;
    background-image: url(/images/wallpaper.jpg);
    background-size: cover;
    background-position: center;
    width: 100%;
  }
  .nav-link {
    color: white;
  }
  #logo {
    height: 80px;
  }
  img {
    max-width: 70%;
  }
  .preview {
    display: flex;
    flex-direction: column;
  }
  @media screen and (max-width: 996px) {
    .preview {
      margin-bottom: 20px;
    }
  }
  .preview-pic {
    flex-grow: 1;
  }
  .preview-thumbnail.nav-tabs {
    border: none;
    margin-top: 15px;
  }
  .preview-thumbnail.nav-tabs li {
    width: 18%;
    margin-right: 2.5%;
  }
  .preview-thumbnail.nav-tabs li img {
    max-width: 100%;
    display: block;
  }
  .preview-thumbnail.nav-tabs li a {
    padding: 0;
    margin: 0;
  }
  .preview-thumbnail.nav-tabs li:last-of-type {
    margin-right: 0;
  }
  .tab-content {
    overflow: hidden;
  }
  .tab-content img {
    width: 100%;
    animation-name: opacity;
    animation-duration: .3s;
  }
  .card {
    margin-top: 50px;
    background: #eee;
    padding: 3em;
    line-height: 1.5em;
  }
  @media screen and (min-width: 997px) {
    .wrapper {
      display: flex;
    }
  }
  .details {
    display: flex;
    flex-direction: column;
  }
  .product-title,
  .price,
  .sizes {
    text-transform: uppercase;
    font-weight: bold;
  }
  .checked,
  .price span {
    color: rgb(255, 63, 108);
  }
  .product-title,
  .rating,
  .product-description,
  .price,
  .vote,
  .sizes {
    margin-bottom: 15px;
  }
  .product-title {
    margin-top: 0;
  }
  .size {
    margin-right: 10px;
  }
  .size:first-of-type {
    margin-left: 40px;
  }
  .add-to-cart,
  .like {
    background: rgb(255, 63, 108);
    padding: 1.2em 1.5em;
    border: none;
    text-transform: uppercase;
    font-weight: bold;
    color: #fff;
    transition: background .3s ease;
    margin-right: 10px;
  }
  .add-to-cart:hover,
  .like:hover {
    background: rgb(255, 63, 108);
    color: #fff;
  }
  .not-available {
    text-align: center;
    line-height: 2em;
  }
  .not-available:before {
    content: "\f00d";
    color: #fff;
  }
  .tooltip-inner {
    padding: 1.3em;
  }
  .contant {
    margin-top: 7rem;
  }
  .out-of-stock {
    color: red;
    font-weight: bold;
    margin-bottom: 10px;
  }
  .alert {
    margin-top: 15px;
    padding: 10px;
    border-radius: 5px;
    display: none;
  }
  .alert.show {
    display: block;
  }
  .alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
  }
  .quantity-input {
    margin-left: 10px;
    padding: 5px;
    width: 80px;
  }
  .action {
    margin-top: 20px;
  }
  .wishlisted {
    background-color: #dc3545 !important;
  }
  .similar-products {
    margin-top: 40px;
    padding: 20px;
    background: #f9f9f9;
    border-radius: 8px;
  }
  .similar-products h3 {
    font-size: 1.8rem;
    margin-bottom: 20px;
    text-align: center;
    color: #333;
  }
  .similar-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
  }
  .similar-product-card {
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    text-align: center;
    transition: transform 0.2s;
  }
  .similar-product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  .similar-product-card img {
    max-width: 100%;
    height: 150px;
    object-fit: cover;
    border-radius: 4px;
  }
  .similar-product-card h4 {
    font-size: 1.2rem;
    margin: 10px 0;
    color: #333;
  }
  .similar-product-card p {
    font-size: 1rem;
    color: rgb(255, 63, 108);
    margin: 5px 0;
  }
  .similar-product-card a {
    text-decoration: none;
    color: inherit;
  }
  @keyframes opacity {
    0% { opacity: 0; transform: scale(3); }
    100% { opacity: 1; transform: scale(1); }
  }
  .carousel-inner {
    position: relative;
    overflow: visible;
  }
  .zoomable-image {
    transition: transform 0.3s ease;
    cursor: zoom-in;
    max-width: 70%;
    display: block;
    margin: 0 auto;
  }
  .zoomable-image.zoomed {
    transform: scale(1.5);
    z-index: 10;
    position: relative;
    border: 2px solid #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }
  @media screen and (max-width: 768px) {
    .zoomable-image {
      cursor: default;
    }
    .zoomable-image.zoomed {
      transform: scale(1);
    }
  }
  .size-select {
    padding: 5px;
    margin-left: 10px;
    width: 150px;
    border-radius: 4px;
    border: 1px solid #ccc;
  }
</style>

<div class="contant container">
  <div class="card">
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-6">
          <h2><%= product.name %></h2>
          <% if (product.allVariantsOutOfStock) { %>
            <p class="out-of-stock">Out of Stock</p>
          <% } %>
          
          <!-- Image Carousel -->
          <div id="carouselExample" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
              <% product.images.forEach((image, index) => { %>
                <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                  <img src="<%= image %>" class="d-block w-100 zoomable-image" alt="Image <%= index + 1 %>" data-zoom="/<%= image %>">
                </div>
              <% }); %>
            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Next</span>
            </button>
          </div>

          <!-- Thumbnail Images -->
          <div class="row mt-3">
            <% product.images.slice(1).forEach((thumbnail, index) => { %>
              <div class="col-2">
                <img class="thumb" src="<%= thumbnail %>" class="img-fluid" alt="Thumbnail <%= index + 2 %>" data-bs-target="#carouselExample" data-bs-slide-to="<%= index + 1 %>">
              </div>
            <% }); %>
          </div>
        </div>

        <div class="col-md-6">
          <h3 class="product-title">Category: <%= product.category.name %></h3>
          
          <!-- Product Description -->
          <p class="product-description"><%= product.description %></p>

          <!-- Price Display with Offers -->
          <% let displayPrice = product.price; %>
          <% let offerDescription = ''; %>
          <% if (productOffers.length > 0) { %>
            <% const activeOffer = productOffers.find(offer => new Date() >= offer.startDate && new Date() <= offer.expiryDate); %>
            <% if (activeOffer) { %>
              <% displayPrice = activeOffer.newPrice; %>
              <% offerDescription = 'Flat ' + activeOffer.discountPercentage + '% discount'; %>
            <% } %>
          <% } else if (product.categoryofferprice && product.categoryofferprice < product.price) { %>
            <% displayPrice = product.categoryofferprice; %>
            <% offerDescription = 'Category offer applied'; %>
          <% } %>
          <h4 class="price">
            Price: 
            <% if (displayPrice < product.price) { %>
              <span style="text-decoration: line-through;">₹<%= product.price %></span> 
            <% } %>
            ₹<%= displayPrice.toFixed(2) %>
          </h4>
          <% if (offerDescription) { %>
            <div class="offer-details">
              <p><%= offerDescription %></p>
            </div>
          <% } %>

          <!-- Size Selection -->
          <h5 class="sizes">Size:
            <select class="size-select" name="size" required>
              <option value="" disabled selected>Select a size</option>
              <% product.variants.forEach(variant => { %>
                <option value="<%= variant.size %>" data-max-quantity="<%= variant.availableQuantity %>" <%= !variant.isAvailable ? 'disabled' : '' %>>
                  <%= variant.size %> <%= !variant.isAvailable ? '(Out of Stock)' : '' %>
                </option>
              <% }); %>
            </select>
          </h5>

          <!-- Quantity Input -->
          <h5 class="quantity">Quantity:
            <input 
              type="number" 
              class="quantity-input" 
              value="1" 
              min="1" 
              max="1"
              <%= product.allVariantsOutOfStock ? 'disabled' : '' %> 
              required
              pattern="[1-9]\d*" 
              oninput="if (!this.validity.valid) this.value = '1';"
            >
          </h5>

          <!-- Error Messages -->
          <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-danger show"><%= error %></div>
          <% } %>
          <div id="stock-error" class="alert alert-danger"></div>

          <!-- Action Buttons -->
          <!-- Action Buttons -->
<div class="action" id="action-buttons">
  <% if (product.allVariantsOutOfStock) { %>
    <button class="btn btn-secondary" type="button" disabled>
      Out of Stock
    </button>
    <button class="like btn btn-danger <%= productInWishlist ? 'wishlisted' : '' %>" type="button" onclick="addToWishlist('<%= product._id %>')" disabled>
      <span class="fa fa-heart"></span>
      <%= productInWishlist ? 'Wishlisted' : 'Add to Wishlist' %>
    </button>
  <% } else { %>
    <button class="add-to-cart btn btn-primary" type="button">
      Add to Cart
    </button>
    <button class="like btn btn-danger <%= productInWishlist ? 'wishlisted' : '' %>" type="button" onclick="addToWishlist('<%= product._id %>')">
      <span class="fa fa-heart"></span>
      <%= productInWishlist ? 'Wishlisted' : 'Add to Wishlist' %>
    </button>
  <% } %>
</div>

          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Similar Products Section -->
  <% if (similarProducts && similarProducts.length > 0) { %>
    <div class="similar-products container">
      <h3>Similar Products</h3>
      <div class="similar-products-grid">
        <% similarProducts.forEach(similarProduct => { %>
          <a href="/products/<%= similarProduct._id %>">
            <div class="similar-product-card">
              <img src="<%= similarProduct.images[0] %>" alt="<%= similarProduct.name %>">
              <h4><%= similarProduct.name %></h4>
              <% 
                let similarDisplayPrice = similarProduct.price;
                let similarOfferDescription = '';
                const similarProductOffer = productOffers.find(offer => offer.product.toString() === similarProduct._id.toString() && new Date() >= offer.startDate && new Date() <= offer.expiryDate);
                if (similarProductOffer) {
                  similarDisplayPrice = similarProductOffer.newPrice;
                  similarOfferDescription = 'Flat ' + similarProductOffer.discountPercentage + '% discount';
                } else if (similarProduct.categoryofferprice && similarProduct.categoryofferprice < similarProduct.price) {
                  similarDisplayPrice = similarProduct.categoryofferprice;
                  similarOfferDescription = 'Category offer applied';
                }
              %>
              <p>
                <% if (similarDisplayPrice < similarProduct.price) { %>
                  <span style="text-decoration: line-through;">₹<%= similarProduct.price %></span>
                <% } %>
                ₹<%= similarDisplayPrice.toFixed(2) %>
              </p>
              <% if (similarOfferDescription) { %>
                <p><%= similarOfferDescription %></p>
              <% } %>
            </div>
          </a>
        <% }); %>
      </div>
    </div>
  <% } %>
</div>

<!-- SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

<!-- Add to Cart Script -->
<script>
document.addEventListener('DOMContentLoaded', function () {
  const addToCartButton = document.querySelector('.add-to-cart');
  const sizeSelect = document.querySelector('.size-select');
  const quantityInput = document.querySelector('.quantity-input');
  const stockErrorDiv = document.getElementById('stock-error');
  const actionButtons = document.getElementById('action-buttons');

  function updateUIForSelectedSize() {
    const selectedSize = sizeSelect.value;
    stockErrorDiv.classList.remove('show');
    stockErrorDiv.textContent = '';

    if (!selectedSize) {
      quantityInput.setAttribute('max', 1);
      quantityInput.value = 1;
      quantityInput.disabled = false;
      actionButtons.style.pointerEvents = 'auto';
      actionButtons.style.opacity = '1';
      addToCartButton.disabled = false;
      document.querySelector('.like').disabled = false;
      return;
    }

    const selectedOption = sizeSelect.querySelector(`option[value="${selectedSize}"]`);
    const maxQuantity = selectedOption.dataset.maxQuantity || 1;
    const isAvailable = selectedOption.disabled === false;

    if (!isAvailable) {
      stockErrorDiv.textContent = `Size ${selectedSize} is currently out of stock. Please choose another size.`;
      stockErrorDiv.classList.add('show');
      quantityInput.setAttribute('max', 1);
      quantityInput.value = 1;
      quantityInput.disabled = true;
      actionButtons.style.pointerEvents = 'none';
      actionButtons.style.opacity = '0.5';
      addToCartButton.disabled = true;
      document.querySelector('.like').disabled = true;
    } else {
      quantityInput.setAttribute('max', maxQuantity);
      quantityInput.value = 1;
      quantityInput.disabled = false;
      actionButtons.style.pointerEvents = 'auto';
      actionButtons.style.opacity = '1';
      addToCartButton.disabled = false;
      document.querySelector('.like').disabled = false;
    }
  }

  sizeSelect.addEventListener('change', updateUIForSelectedSize);
  updateUIForSelectedSize(); // Initial call to set correct state

  if (addToCartButton) {
    addToCartButton.addEventListener('click', function () {
      const productId = '<%= product._id %>';
      const quantity = parseInt(quantityInput.value);
      const size = sizeSelect.value;

      // Clear previous error messages
      stockErrorDiv.classList.remove('show');
      stockErrorDiv.textContent = '';

      // Validate size selection
      if (!size) {
        stockErrorDiv.textContent = 'Kindly select a size before adding to the cart.';
        stockErrorDiv.classList.add('show');
        Swal.fire({
          title: 'Missing Size',
          text: 'Kindly select a size before adding to the cart.',
          icon: 'warning',
          confirmButtonText: 'OK',
          confirmButtonColor: '#3085d6'
        });
        return;
      }

      // Validate quantity
      if (isNaN(quantity) || quantity < 1) {
        stockErrorDiv.textContent = 'Please enter a valid quantity (minimum 1).';
        stockErrorDiv.classList.add('show');
        Swal.fire({
          title: 'Invalid Quantity',
          text: 'Please enter a valid quantity (minimum 1).',
          icon: 'warning',
          confirmButtonText: 'OK',
          confirmButtonColor: '#3085d6'
        });
        return;
      }

      // Validate max quantity
      const selectedOption = sizeSelect.querySelector(`option[value="${size}"]`);
      const maxQuantity = parseInt(selectedOption.dataset.maxQuantity);
      if (quantity > maxQuantity) {
        stockErrorDiv.textContent = `Only ${maxQuantity} item${maxQuantity !== 1 ? 's' : ''} available for size ${size}.`;
        stockErrorDiv.classList.add('show');
        Swal.fire({
          title: 'Insufficient Stock',
          text: `Only ${maxQuantity} item${maxQuantity !== 1 ? 's' : ''} available for size ${size}.`,
          icon: 'warning',
          confirmButtonText: 'OK',
          confirmButtonColor: '#3085d6'
        });
        return;
      }

      fetch('/cart/add', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json' 
        },
        body: JSON.stringify({ 
          productId: productId, 
          quantity: quantity,
          size: size 
        }),
      })
      .then(function (response) {
        console.log('Add to cart response status: ' + response.status);
        if (response.redirected) {
          window.location.href = response.url;
          return null;
        }
        return response.json();
      })
      .then(function (data) {
        if (data) {
          if (data.success) {
            Swal.fire({
              title: 'Success',
              text: 'Product successfully added to the cart.',
              icon: 'success',
              timer: 1500,
              showConfirmButton: false,
            });
            setTimeout(function () { window.location.href = '/cart'; }, 1500);
          } else {
            const errorMessage = data.error || 'Product is out of stock for the selected size.';
            stockErrorDiv.textContent = errorMessage;
            stockErrorDiv.classList.add('show');
            Swal.fire({
              title: 'Error',
              text: errorMessage,
              icon: 'error',
              confirmButtonText: 'OK',
              confirmButtonColor: '#3085d6'
            });
          }
        }
      })
      .catch(function (error) {
        console.error('Error adding to cart: ' + error);
        const errorMessage = 'An error occurred while adding to the cart. Please try again.';
        stockErrorDiv.textContent = errorMessage;
        stockErrorDiv.classList.add('show');
        Swal.fire({
          title: 'Error',
          text: errorMessage,
          icon: 'error',
          confirmButtonText: 'OK',
          confirmButtonColor: '#3085d6'
        });
      });
    });
  }

  // Zoom Effect Script
  const zoomableImages = document.querySelectorAll('.zoomable-image');
  zoomableImages.forEach(function (image) {
    image.addEventListener('click', function () {
      if (window.innerWidth > 768) {
        this.classList.toggle('zoomed');
      }
    });
  });

  // Reset zoom when carousel slides
  const carousel = document.getElementById('carouselExample');
  carousel.addEventListener('slide.bs.carousel', function () {
    const activeImage = document.querySelector('.carousel-item.active .zoomable-image');
    if (activeImage) {
      activeImage.classList.remove('zoomed');
    }
  });
});
</script>

<!-- Wishlist Script -->
<script>
function addToWishlist(productId) {
  fetch('/addtowishlist', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
    body: JSON.stringify({ productId: productId }),
  })
  .then(function (response) {
    return response.json();
  })
  .then(function (data) {
    if (data.message === 'Product added to wishlist successfully') {
      const productInWishlist = data.inWishlist;
      const likeButton = document.querySelector('.like');
      
      if (likeButton) {
        likeButton.innerHTML = '<span class="fa fa-heart"></span> ' + (productInWishlist ? 'Wishlisted' : 'Add to Wishlist');
        likeButton.classList.toggle('wishlisted', productInWishlist);
      }

      Swal.fire({
        title: 'Success',
        text: productInWishlist ? 'Product added to wishlist!' : 'Product removed from wishlist!',
        icon: 'success',
        timer: 1500,
        showConfirmButton: false,
      });
    } else if (data.error) {
      Swal.fire({
        title: 'Info',
        text: data.error,
        icon: 'info',
        confirmButtonText: 'OK',
        confirmButtonColor: '#3085d6'
      });
    }
  })
  .catch(function (error) {
    console.error('Error adding product to wishlist: ' + error);
    Swal.fire({
      title: 'Error',
      text: 'An error occurred while updating the wishlist',
      icon: 'error',
      confirmButtonText: 'OK',
      confirmButtonColor: '#3085d6'
    });
  });
}
</script>

<%- include('./footer') %>