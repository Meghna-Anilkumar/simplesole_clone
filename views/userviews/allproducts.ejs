<%- include('./sidebar') %>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 20px;
  }

  form {
    max-width: 600px;
    margin: auto;
  }

  label {
    display: block;
    margin-top: 10px;
  }

  input,
  select {
    width: 100%;
    padding: 8px;
    margin-top: 5px;
    margin-bottom: 10px;
    box-sizing: border-box;
  }

  button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  #imagePreview img {
    max-width: 100px;
    max-height: 100px;
    margin: 5px;
  }

  .preview-container {
    position: relative;
    display: inline-block;
  }

  .delete-button {
    position: absolute;
    top: 0;
    right: 0;
    background: red;
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    line-height: 20px;
    text-align: center;
    cursor: pointer;
  }

  .modal-content {
    padding: 20px;
  }

  #cropper-container {
    max-width: 100%;
    max-height: 400px;
    margin-bottom: 10px;
  }

  #cropper-container img {
    max-width: 100%;
    max-height: 400px;
  }

  .cropper-buttons {
    display: flex;
    gap: 10px;
  }

  #imageQueue {
    margin-top: 10px;
    font-size: 14px;
  }
</style>

<body>
  <div class="content">
    <form id="productForm" action="/addProduct" method="post" class="form-horizontal" enctype="multipart/form-data">
      <h2 style="color: blue;">Add New Product</h2>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name">NAME</label>
        <div class="col-md-8">
          <input id="product_name" name="name" placeholder="" class="form-control input-md" required="true" type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_name_fr">DESCRIPTION</label>
        <div class="col-md-8">
          <input id="product_name_fr" name="description" placeholder="" class="form-control input-md" required="" type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="product_categorie">CATEGORY</label>
        <div class="col-md-4">
          <select id="product_categorie" name="category" class="form-control" required>
            <option value="" disabled selected>Select Category</option>
            <% category.forEach(cat => { %>
              <option value="<%= cat._id %>"><%= cat.name %></option>
            <% }); %>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="price">PRICE</label>
        <div class="col-md-4">
          <input id="price" name="price" placeholder="" class="form-control input-md" required="true" type="text">
        </div>
        <label class="col-md-4 control-label" for="stock">STOCK</label>
        <div class="col-md-4">
          <input id="stock" name="stock" placeholder="" class="form-control input-md" required="true" type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="size">SIZE</label>
        <div class="col-md-4">
          <input id="size" name="size" placeholder="" class="form-control input-md" required="" type="text">
        </div>
        <label class="col-md-4 control-label" for="color">COLOR</label>
        <div class="col-md-4">
          <input id="color" name="color" placeholder="" class="form-control input-md" required="" type="text">
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-4 control-label" for="filebutton">IMAGES</label>
        <div class="col-md-4">
          <input id="filebutton" name="images" class="input-file" type="file" multiple accept="image/*" onchange="openCropperModal(this)">
        </div>
      </div>
      <div class="image-preview" id="imagePreview"></div>
      <input type="hidden" name="croppedImages" id="croppedImages">

      <div class="form-group">
        <label class="col-md-4 control-label" for="singlebutton"></label>
        <div class="col-md-4">
          <button id="singlebutton" name="singlebutton" class="btn btn-success">Save Product</button>
        </div>
      </div>
    </form>
  </div>

  <!-- Cropper Modal -->
  <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div id="cropper-container">
            <img id="imageToCrop" src="" alt="Image to crop">
          </div>
          <div id="imageQueue">Images remaining: <span id="queueCount">0</span></div>
          <div class="cropper-buttons">
            <button type="button" id="cropButton" class="btn btn-primary">Crop and Next</button>
            <button type="button" id="skipButton" class="btn btn-warning">Skip</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Done</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css" rel="stylesheet">

  <script>
    let cropper;
    let fileQueue = [];
    let croppedImages = [];
    let currentFileIndex = 0;

    function openCropperModal(input) {
      fileQueue = Array.from(input.files);
      currentFileIndex = 0;
      if (fileQueue.length > 0) {
        processNextImage();
      } else {
        Swal.fire({
          icon: 'error',
          title: 'No Images',
          text: 'Please select at least one image to upload.',
        });
      }
    }

    function processNextImage() {
      if (currentFileIndex >= fileQueue.length) {
        bootstrap.Modal.getInstance(document.getElementById('cropperModal')).hide();
        document.getElementById('filebutton').value = '';
        return;
      }

      const currentFile = fileQueue[currentFileIndex];
      const reader = new FileReader();
      reader.onload = function (e) {
        const imageToCrop = document.getElementById('imageToCrop');
        imageToCrop.src = e.target.result;
        document.getElementById('queueCount').textContent = `${fileQueue.length - currentFileIndex - 1}`;
        const modal = new bootstrap.Modal(document.getElementById('cropperModal'), { backdrop: 'static' });
        modal.show();

        if (cropper) {
          cropper.destroy();
        }
        cropper = new Cropper(imageToCrop, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true,
        });
      };
      reader.readAsDataURL(currentFile);
    }

    document.getElementById('cropButton').addEventListener('click', async function () {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas({
          width: 300,
          height: 300,
        });

        canvas.toBlob(async (blob) => {
          const formData = new FormData();
          formData.append('croppedImage', blob, `cropped_${fileQueue[currentFileIndex].name}`);

          try {
            const response = await fetch('/upload-cropped-image', {
              method: 'POST',
              body: formData,
            });
            const result = await response.json();
            console.log('Upload response:', result);
            if (response.ok) {
              croppedImages.push(result.filename);
              document.getElementById('croppedImages').value = JSON.stringify(croppedImages);
              console.log('Cropped images updated:', croppedImages);
              console.log('Hidden input value:', document.getElementById('croppedImages').value);

              // Add to preview
              const previewContainer = document.getElementById('imagePreview');
              const previewDiv = document.createElement('div');
              previewDiv.className = 'preview-container';
              const img = document.createElement('img');
              img.src = result.filename;
              const deleteButton = document.createElement('button');
              deleteButton.className = 'delete-button';
              deleteButton.innerHTML = 'X';
              deleteButton.onclick = function () {
                previewContainer.removeChild(previewDiv);
                croppedImages = croppedImages.filter(url => url !== result.filename);
                document.getElementById('croppedImages').value = JSON.stringify(croppedImages);
                console.log('Cropped images after delete:', croppedImages);
              };
              previewDiv.appendChild(img);
              previewDiv.appendChild(deleteButton);
              previewContainer.appendChild(previewDiv);

              cropper.destroy();
              cropper = null;
              currentFileIndex++;
              processNextImage();
            } else {
              console.error('Upload failed:', result.error);
              Swal.fire({
                icon: 'error',
                title: 'Upload Failed',
                text: result.error || 'Failed to upload cropped image',
              });
            }
          } catch (error) {
            console.error('Error uploading cropped image:', error);
            Swal.fire({
              icon: 'error',
              title: 'Upload Failed',
              text: 'Error uploading cropped image',
            });
          }
        }, 'image/jpeg', 0.8);
      }
    });

    document.getElementById('skipButton').addEventListener('click', function () {
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      currentFileIndex++;
      processNextImage();
    });

    document.getElementById('cropperModal').addEventListener('hidden.bs.modal', function () {
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      document.getElementById('filebutton').value = '';
      currentFileIndex = 0;
      fileQueue = [];
      console.log('Modal closed, croppedImages:', croppedImages);
    });

    // Form validation and submission
    document.getElementById('singlebutton').addEventListener('click', function (event) {
      event.preventDefault();
      const form = document.getElementById('productForm');
      const formData = new FormData(form);
      console.log('Form submission, formData:', Array.from(formData.entries()));
      console.log('Cropped images:', croppedImages);
      console.log('Hidden input value:', document.getElementById('croppedImages').value);

      const nameInput = document.getElementById('product_name');
      if (!validateName(nameInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid input',
          text: 'Please enter a valid name.',
        });
        return;
      }

      const priceInput = document.getElementById('price');
      if (!validatePrice(priceInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid input',
          text: 'Please enter a valid price.',
        });
        return;
      }

      const stockInput = document.getElementById('stock');
      if (!validateStock(stockInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid input',
          text: 'Please enter a valid stock.',
        });
        return;
      }

      const sizeInput = document.getElementById('size');
      if (!validateSize(sizeInput.value)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid input',
          text: 'Please enter a valid size.',
        });
        return;
      }

      if (croppedImages.length === 0) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid input',
          text: 'Please upload and crop at least one image.',
        });
        return;
      }

      form.submit();
    });

    function validateName(name) {
      return name.trim() !== "";
    }

    function validatePrice(price) {
      const numericPrice = parseFloat(price);
      return !isNaN(numericPrice) && numericPrice > 0;
    }

    function validateStock(stock) {
      const numericStock = parseInt(stock, 10);
      return !isNaN(numericStock) && numericStock >= 0 && Number.isInteger(numericStock);
    }

    function validateSize(size) {
      return true;
    }
  </script>
</body>
</html>