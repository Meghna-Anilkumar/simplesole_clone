<%- include('./header', { title: 'OTP Verification' }) %>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-body p-4">
                        <h1 class="h4 text-center mb-3">OTP Verification</h1>
                        <p class="text-muted text-center mb-4">
                            An OTP has been sent to <br><strong><%= email %></strong>
                        </p>
                        
                        <form id="otpForm" action="/verify-otp" method="post">
                            <% if (typeof error !== 'undefined') { %>
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <%= error %>
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            <% } %>
                            <% if (typeof message !== 'undefined') { %>
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    <%= message %>
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            <% } %>

                            <input type="hidden" name="email" value="<%= email %>">

                            <div class="mb-4">
                                <label for="otp" class="form-label">Enter 6-digit OTP:</label>
                                <input type="text" class="form-control form-control-lg text-center" id="otp" name="otp" 
                                       placeholder="000000" maxlength="6" pattern="[0-9]{6}" 
                                       title="Please enter a 6-digit OTP" required
                                       style="letter-spacing: 0.5rem; font-family: monospace; max-width: 200px; margin: 0 auto;">
                                <div class="invalid-feedback text-center">
                                    Please enter a valid 6-digit OTP.
                                </div>
                            </div>
                            
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary btn-lg" id="submitBtn" disabled>
                                    Verify OTP
                                </button>
                            </div>
                        </form>

                        <div class="text-center mt-4">
                            <div id="otpTimer" class="text-muted small">
                                Resend OTP in <span id="countdown" class="fw-bold text-primary">60</span> seconds
                            </div>
                            <div id="resendContainer" class="d-none">
                                <button id="resendBtn" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    Resend OTP
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Timer persistence logic
        const TIMER_KEY = 'otp_timer_' + '<%= email %>';
        const TIMER_START_KEY = 'otp_timer_start_' + '<%= email %>';
        
        let countdown = 60;
        let timer;
        
        // Check if timer was running before page reload
        const savedStartTime = localStorage.getItem(TIMER_START_KEY);
        if (savedStartTime) {
            const elapsed = Math.floor((Date.now() - parseInt(savedStartTime)) / 1000);
            countdown = Math.max(0, 60 - elapsed);
        } else {
            // First time loading, save start time
            localStorage.setItem(TIMER_START_KEY, Date.now().toString());
        }

        const countdownElement = document.getElementById('countdown');
        const otpTimerElement = document.getElementById('otpTimer');
        const resendContainer = document.getElementById('resendContainer');
        const resendBtn = document.getElementById('resendBtn');
        const otpInput = document.getElementById('otp');
        const form = document.getElementById('otpForm');
        const submitBtn = document.getElementById('submitBtn');

        function updateCountdown() {
            countdownElement.textContent = countdown;
            if (countdown === 0) {
                otpTimerElement.classList.add('d-none');
                resendContainer.classList.remove('d-none');
                clearInterval(timer);
                // Clear the timer data when it expires
                localStorage.removeItem(TIMER_START_KEY);
            } else {
                countdown--;
            }
        }

        // Start the countdown
        if (countdown > 0) {
            updateCountdown();
            timer = setInterval(updateCountdown, 1000);
        } else {
            otpTimerElement.classList.add('d-none');
            resendContainer.classList.remove('d-none');
        }

        // Focus on input
        otpInput.focus();

        // Input validation and button state management
        otpInput.addEventListener('input', function(e) {
            // Only allow numbers
            this.value = this.value.replace(/[^0-9]/g, '').slice(0, 6);
            
            // Update button state and validation classes
            if (this.value.length === 6) {
                this.classList.remove('is-invalid');
                this.classList.add('is-valid');
                submitBtn.disabled = false;
            } else {
                this.classList.remove('is-valid');
                if (this.value.length > 0) {
                    this.classList.add('is-invalid');
                }
                submitBtn.disabled = true;
            }
        });

        // Initial button state check
        if (otpInput.value.length !== 6) {
            submitBtn.disabled = true;
        }

        // Handle form submission with AJAX
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            if (otpInput.value.length !== 6 || !/^[0-9]{6}$/.test(otpInput.value)) {
                otpInput.classList.add('is-invalid');
                return;
            }

            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                Verifying...
            `;

            try {
                const response = await fetch('/verify-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        email: '<%= email %>',
                        otp: otpInput.value
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    // Clear timer data on successful verification
                    localStorage.removeItem(TIMER_START_KEY);
                    
                    // Show success message with SweetAlert
                    Swal.fire({
                        title: 'Success!',
                        text: result.message || 'OTP verified successfully!',
                        icon: 'success',
                        confirmButtonText: 'Continue',
                        confirmButtonColor: '#0d6efd',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then(() => {
                        window.location.href = result.redirect || '/login';
                    });
                } else {
                    // Show error message
                    showAlert('danger', result.error || 'Invalid or expired OTP');
                    resetSubmitButton();
                }
            } catch (error) {
                console.error('Error verifying OTP:', error);
                showAlert('danger', 'Failed to verify OTP. Please try again.');
                resetSubmitButton();
            }
        });

        // Handle resend OTP click
        resendBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            
            resendBtn.disabled = true;
            resendBtn.innerHTML = `
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                Sending...
            `;

            try {
                const response = await fetch('/resend-otp', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: '<%= email %>' })
                });

                const result = await response.json();

                if (response.ok) {
                    // Reset timer
                    countdown = 60;
                    localStorage.setItem(TIMER_START_KEY, Date.now().toString());
                    
                    otpTimerElement.classList.remove('d-none');
                    resendContainer.classList.add('d-none');
                    countdownElement.textContent = countdown;
                    
                    clearInterval(timer);
                    timer = setInterval(updateCountdown, 1000);
                    
                    // Clear OTP input
                    otpInput.value = '';
                    otpInput.classList.remove('is-valid', 'is-invalid');
                    submitBtn.disabled = true;
                    otpInput.focus();
                    
                    showAlert('success', 'New OTP sent successfully!');
                } else {
                    showAlert('danger', result.error || 'Failed to resend OTP. Please try again.');
                }
            } catch (error) {
                console.error('Error resending OTP:', error);
                showAlert('danger', 'Failed to resend OTP. Please try again.');
            } finally {
                resetResendButton();
            }
        });

        // Helper functions
        function resetSubmitButton() {
            submitBtn.disabled = otpInput.value.length !== 6;
            submitBtn.innerHTML = 'Verify OTP';
            submitBtn.classList.remove('btn-success');
            submitBtn.classList.add('btn-primary');
        }

        function resetResendButton() {
            resendBtn.disabled = false;
            resendBtn.innerHTML = `
                <i class="bi bi-arrow-clockwise me-1"></i>
                Resend OTP
            `;
        }

        function showAlert(type, message) {
            // Remove existing alerts
            const existingAlerts = form.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());
            
            // Add new alert
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            form.insertAdjacentHTML('afterbegin', alertHtml);
        }

        // Auto-submit when 6 digits are entered - REMOVED for manual submission only

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (countdown <= 0) {
                localStorage.removeItem(TIMER_START_KEY);
            }
        });
    </script>
<%- include('./footer') %>