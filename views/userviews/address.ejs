<%- include('./header') %>
<%- include('./sidebar') %>

<style>
  .address-box {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 5px;
    background-color: #f9f9f9;
  }

  .address-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 10px;
  }

  .edit-btn,
  .delete-btn {
    padding: 5px 10px;
    cursor: pointer;
    color: #000;
    border: none;
    background: none;
  }

  .edit-btn:hover,
  .delete-btn:hover {
    color: #007bff;
  }

  .address-box p {
    margin: 5px 0;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-check-inline {
    margin-right: 20px;
  }

  .error-message {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
  }

  .form-control.is-invalid {
    border-color: #dc3545;
  }

  .form-control.is-valid {
    border-color: #28a745;
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
</style>

<div class="col-md-5 border-right" style="margin-top: 80px;">
  <div class="p-3 py-5">
    <form id="editProfileForm">
      <div class="mt-3">
        <button class="btn btn-primary profile-button" id="openAddressModal" type="button">
          <i class="fas fa-plus"></i> Add Address
        </button>
        <div id="addressContainer" style="margin-top: 20px;"></div>
      </div>
    </form>
  </div>
</div>

<!-- Add Address Modal -->
<div class="modal fade" id="addressModal" tabindex="-1" role="dialog" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addressModalLabel">Add Address</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="addressForm">
          <div class="form-group">
            <label for="addressName">Name <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="addressName" name="addressName" required>
            <div class="error-message" id="nameError">Name must be at least 3 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="mobileNumber">Mobile Number <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="mobileNumber" name="mobileNumber" required>
            <div class="error-message" id="mobileError">Mobile number must be exactly 10 digits</div>
          </div>
          <div class="form-group">
            <label for="buildingname">Building Name <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="buildingname" name="buildingname" required>
            <div class="error-message" id="buildingError">Building name must be at least 3 characters</div>
          </div>
          <div class="form-group">
            <label for="street">Street <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="street" name="street" required>
            <div class="error-message" id="streetError">Street must be at least 3 characters</div>
          </div>
          <div class="form-group">
            <label for="city">City <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="city" name="city" required>
            <div class="error-message" id="cityError">City must be at least 2 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="state">State <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="state" name="state" required>
            <div class="error-message" id="stateError">State must be at least 2 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="PINCode">PIN Code <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="PINCode" name="PINCode" required>
            <div class="error-message" id="pinError">PIN code must be exactly 6 digits</div>
          </div>
          <div class="form-group">
            <label>Address Type <span style="color: red;">*</span></label><br>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="addressType" id="homeAddress" value="home" required>
              <label class="form-check-label" for="homeAddress">Home</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="addressType" id="workAddress" value="work">
              <label class="form-check-label" for="workAddress">Work</label>
            </div>
            <div class="error-message" id="typeError">Please select an address type</div>
          </div>
          <button type="submit" class="btn btn-primary submit-btn" id="addAddressBtn" disabled>Save Address</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" role="dialog" aria-labelledby="editAddressModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="editAddressForm">
          <div class="form-group">
            <label for="editaddressName">Name <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editaddressName" name="addressName" required>
            <div class="error-message" id="editNameError">Name must be at least 3 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="editmobileNumber">Mobile Number <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editmobileNumber" name="mobileNumber" required>
            <div class="error-message" id="editMobileError">Mobile number must be exactly 10 digits</div>
          </div>
          <div class="form-group">
            <label for="editbuildingname">Building Name <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editbuildingname" name="buildingname" required>
            <div class="error-message" id="editBuildingError">Building name must be at least 3 characters</div>
          </div>
          <div class="form-group">
            <label for="editstreet">Street <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editstreet" name="street" required>
            <div class="error-message" id="editStreetError">Street must be at least 3 characters</div>
          </div>
          <div class="form-group">
            <label for="editcity">City <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editcity" name="city" required>
            <div class="error-message" id="editCityError">City must be at least 2 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="editstate">State <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editstate" name="state" required>
            <div class="error-message" id="editStateError">State must be at least 2 characters and contain only letters</div>
          </div>
          <div class="form-group">
            <label for="editPINCode">PIN Code <span style="color: red;">*</span></label>
            <input type="text" class="form-control" id="editPINCode" name="PINCode" required>
            <div class="error-message" id="editPinError">PIN code must be exactly 6 digits</div>
          </div>
          <div class="form-group">
            <label>Address Type <span style="color: red;">*</span></label><br>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="addressType" id="edithomeAddress" value="home" required>
              <label class="form-check-label" for="edithomeAddress">Home</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="addressType" id="editworkAddress" value="work">
              <label class="form-check-label" for="editworkAddress">Work</label>
            </div>
            <div class="error-message" id="editTypeError">Please select an address type</div>
          </div>
          <button type="submit" class="btn btn-primary submit-btn" id="updateAddressBtn" disabled>Update Address</button>
        </form>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Validation Rules
  const validationRules = {
    name: {
      test: (value) => /^[a-zA-Z\s]{3,}$/.test(value.trim()),
      message: 'Name must be at least 3 characters and contain only letters'
    },
    mobile: {
      test: (value) => /^[0-9]{10}$/.test(value.trim()),
      message: 'Mobile number must be exactly 10 digits'
    },
    building: {
      test: (value) => value.trim().length >= 3,
      message: 'Building name must be at least 3 characters'
    },
    street: {
      test: (value) => value.trim().length >= 3,
      message: 'Street must be at least 3 characters'
    },
    city: {
      test: (value) => /^[a-zA-Z\s]{2,}$/.test(value.trim()),
      message: 'City must be at least 2 characters and contain only letters'
    },
    state: {
      test: (value) => /^[a-zA-Z\s]{2,}$/.test(value.trim()),
      message: 'State must be at least 2 characters and contain only letters'
    },
    pincode: {
      test: (value) => /^[0-9]{6}$/.test(value.trim()),
      message: 'PIN code must be exactly 6 digits'
    }
  };

  // Validate Individual Field
  function validateField(input, rule, errorElement) {
    const value = input.value;
    const isValid = rule.test(value);
    
    if (value && !isValid) {
      input.classList.add('is-invalid');
      input.classList.remove('is-valid');
      errorElement.style.display = 'block';
      errorElement.textContent = rule.message;
      return false;
    } else if (value && isValid) {
      input.classList.remove('is-invalid');
      input.classList.add('is-valid');
      errorElement.style.display = 'none';
      return true;
    } else {
      input.classList.remove('is-invalid', 'is-valid');
      errorElement.style.display = 'none';
      return false;
    }
  }

  // Validate Entire Form
  function validateForm(formId, submitBtnId) {
    const form = document.getElementById(formId);
    const submitBtn = document.getElementById(submitBtnId);
    const isEditForm = formId === 'editAddressForm';
    const prefix = isEditForm ? 'edit' : '';
    
    const nameInput = document.getElementById(`${prefix}addressName`);
    const mobileInput = document.getElementById(`${prefix}mobileNumber`);
    const buildingInput = document.getElementById(`${prefix}buildingname`);
    const streetInput = document.getElementById(`${prefix}street`);
    const cityInput = document.getElementById(`${prefix}city`);
    const stateInput = document.getElementById(`${prefix}state`);
    const pincodeInput = document.getElementById(`${prefix}PINCode`);
    const addressTypeInputs = form.querySelectorAll('input[name="addressType"]');
    
    const nameError = document.getElementById(`${prefix}nameError`);
    const mobileError = document.getElementById(`${prefix}mobileError`);
    const buildingError = document.getElementById(`${prefix}buildingError`);
    const streetError = document.getElementById(`${prefix}streetError`);
    const cityError = document.getElementById(`${prefix}cityError`);
    const stateError = document.getElementById(`${prefix}stateError`);
    const pinError = document.getElementById(`${prefix}pinError`);
    const typeError = document.getElementById(`${prefix}typeError`);
    
    const isAddressTypeSelected = Array.from(addressTypeInputs).some(input => input.checked);
    
    const nameValid = validateField(nameInput, validationRules.name, nameError);
    const mobileValid = validateField(mobileInput, validationRules.mobile, mobileError);
    const buildingValid = validateField(buildingInput, validationRules.building, buildingError);
    const streetValid = validateField(streetInput, validationRules.street, streetError);
    const cityValid = validateField(cityInput, validationRules.city, cityError);
    const stateValid = validateField(stateInput, validationRules.state, stateError);
    const pincodeValid = validateField(pincodeInput, validationRules.pincode, pinError);
    
    if (isAddressTypeSelected) {
      typeError.style.display = 'none';
    }
    
    const allValid = nameValid && mobileValid && buildingValid && streetValid && 
                     cityValid && stateValid && pincodeValid && isAddressTypeSelected;
    
    submitBtn.disabled = !allValid;
    return allValid;
  }

  // Setup Form Validation
  function setupFormValidation(formId, submitBtnId) {
    const form = document.getElementById(formId);
    const isEditForm = formId === 'editAddressForm';
    const prefix = isEditForm ? 'edit' : '';
    
    const inputs = [
      document.getElementById(`${prefix}addressName`),
      document.getElementById(`${prefix}mobileNumber`),
      document.getElementById(`${prefix}buildingname`),
      document.getElementById(`${prefix}street`),
      document.getElementById(`${prefix}city`),
      document.getElementById(`${prefix}state`),
      document.getElementById(`${prefix}PINCode`)
    ];
    
    const addressTypeInputs = form.querySelectorAll('input[name="addressType"]');
    
    inputs.forEach(input => {
      input.addEventListener('input', () => validateForm(formId, submitBtnId));
      input.addEventListener('blur', () => validateForm(formId, submitBtnId));
    });
    
    addressTypeInputs.forEach(input => {
      input.addEventListener('change', () => validateForm(formId, submitBtnId));
    });
  }

  // Initialize validation for both forms
  setupFormValidation('addressForm', 'addAddressBtn');
  setupFormValidation('editAddressForm', 'updateAddressBtn');

  // Open Add Address Modal
  document.getElementById('openAddressModal').addEventListener('click', function () {
    document.getElementById('addressForm').reset();
    document.getElementById('addAddressBtn').disabled = true;
    
    // Clear validation states
    const inputs = document.querySelectorAll('#addressForm .form-control');
    inputs.forEach(input => {
      input.classList.remove('is-valid', 'is-invalid');
    });
    const errors = document.querySelectorAll('#addressForm .error-message');
    errors.forEach(error => {
      error.style.display = 'none';
    });
    
    $('#addressModal').modal('show');
  });

  // Save New Address
  document.getElementById('addressForm').addEventListener('submit', function (event) {
    event.preventDefault();

    if (!validateForm('addressForm', 'addAddressBtn')) {
      Swal.fire({
        icon: 'warning',
        title: 'Invalid Form',
        text: 'Please fill all fields correctly'
      });
      return;
    }

    const addressData = {
      addressName: document.getElementById('addressName').value,
      mobileNumber: document.getElementById('mobileNumber').value,
      buildingname: document.getElementById('buildingname').value,
      street: document.getElementById('street').value,
      city: document.getElementById('city').value,
      state: document.getElementById('state').value,
      PINCode: document.getElementById('PINCode').value,
      addressType: document.querySelector('input[name="addressType"]:checked')?.value,
    };

    fetch('/saveaddress', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(addressData),
    })
      .then(response => response.json())
      .then(data => {
        if (data.message) {
          document.getElementById('addressForm').reset();
          $('#addressModal').modal('hide');
          loadAddresses();
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Address saved successfully',
            timer: 2000,
            showConfirmButton: false,
            position: 'top-end',
            toast: true
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: data.message || 'Failed to save address'
          });
        }
      })
      .catch(error => {
        console.error('Error saving address:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error saving address'
        });
      });
  });

  // Load Addresses Function
  function loadAddresses() {
    fetch('/getaddresses')
      .then(response => response.json())
      .then(addresses => {
        const addressContainer = document.getElementById('addressContainer');
        addressContainer.innerHTML = '';
        addresses.forEach(address => {
          const addressElement = document.createElement('div');
          addressElement.className = 'address-box';
          addressElement.innerHTML = `
            <p><strong>Name:</strong> ${address.name}</p>
            <p><strong>Mobile:</strong> ${address.mobile}</p>
            <p><strong>Building:</strong> ${address.buildingname}</p>
            <p><strong>Street:</strong> ${address.street}</p>
            <p><strong>City:</strong> ${address.city}</p>
            <p><strong>State:</strong> ${address.state}</p>
            <p><strong>PIN Code:</strong> ${address.pincode}</p>
            <p><strong>Type:</strong> ${address.addresstype}</p>
          `;

          const addressActions = document.createElement('div');
          addressActions.className = 'address-actions';

          const editButton = document.createElement('i');
          editButton.className = 'fas fa-edit edit-btn';
          editButton.style.cursor = 'pointer';
          editButton.addEventListener('click', () => handleEditAddress(address._id));

          const deleteButton = document.createElement('i');
          deleteButton.className = 'fas fa-trash delete-btn';
          deleteButton.style.cursor = 'pointer';
          deleteButton.addEventListener('click', () => handleDeleteAddress(address._id));

          addressActions.appendChild(editButton);
          addressActions.appendChild(deleteButton);
          addressElement.appendChild(addressActions);
          addressContainer.appendChild(addressElement);
        });
      })
      .catch(error => {
        console.error('Error loading addresses:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error loading addresses'
        });
      });
  }

  // Load Addresses on Page Load
  window.addEventListener('load', loadAddresses);

  // Delete Address
  function handleDeleteAddress(addressId) {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/deleteaddress/${addressId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        })
          .then(response => response.json())
          .then(data => {
            if (data.message) {
              loadAddresses();
              Swal.fire({
                icon: 'success',
                title: 'Deleted!',
                text: 'Address has been deleted successfully',
                timer: 2000,
                showConfirmButton: false,
                position: 'top-end',
                toast: true
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.error || 'Failed to delete address'
              });
            }
          })
          .catch(error => {
            console.error('Error deleting address:', error);
            Swal.fire({
              icon: 'error',
              title: 'Error!',
              text: 'Error deleting address'
            });
          });
      }
    });
  }

  // Edit Address
  function handleEditAddress(addressId) {
    console.log('Fetching address for edit, ID:', addressId);
    
    fetch(`/getaddresses/${addressId}`)
      .then(response => {
        console.log('Fetch response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(address => {
        console.log('Address data received:', address);
        
        // Populate the edit form with address data
        document.getElementById('editaddressName').value = address.name || '';
        document.getElementById('editmobileNumber').value = address.mobile || '';
        document.getElementById('editbuildingname').value = address.buildingname || '';
        document.getElementById('editstreet').value = address.street || '';
        document.getElementById('editcity').value = address.city || '';
        document.getElementById('editstate').value = address.state || '';
        document.getElementById('editPINCode').value = address.pincode || '';
        
        // Set radio buttons
        if (address.addresstype === 'home') {
          document.getElementById('edithomeAddress').checked = true;
        } else if (address.addresstype === 'work') {
          document.getElementById('editworkAddress').checked = true;
        }

        // Store the address ID for update
        document.getElementById('editAddressForm').setAttribute('data-current-address-id', addressId);
        
        // Validate form after populating to enable/disable submit button
        setTimeout(() => {
          validateForm('editAddressForm', 'updateAddressBtn');
        }, 100);
        
        // Show the modal
        $('#editAddressModal').modal('show');
      })
      .catch(error => {
        console.error('Error fetching address data:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error fetching address data: ' + error.message
        });
      });
  }

  // Save Edited Address
  document.getElementById('editAddressForm').addEventListener('submit', function (event) {
    event.preventDefault();

    if (!validateForm('editAddressForm', 'updateAddressBtn')) {
      Swal.fire({
        icon: 'warning',
        title: 'Invalid Form',
        text: 'Please fill all fields correctly'
      });
      return;
    }

    const addressId = this.getAttribute('data-current-address-id');
    const updatedAddressData = {
      addressName: document.getElementById('editaddressName').value,
      mobileNumber: document.getElementById('editmobileNumber').value,
      buildingname: document.getElementById('editbuildingname').value,
      street: document.getElementById('editstreet').value,
      city: document.getElementById('editcity').value,
      state: document.getElementById('editstate').value,
      PINCode: document.getElementById('editPINCode').value,
      addressType: document.querySelector('#editAddressForm input[name="addressType"]:checked')?.value,
    };

    console.log('Updating address with ID:', addressId);
    console.log('Update data:', updatedAddressData);

    fetch(`/updateAddress/${addressId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedAddressData),
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        console.log('Update response:', data);
        if (data.message) {
          $('#editAddressModal').modal('hide');
          loadAddresses();
          Swal.fire({
            icon: 'success',
            title: 'Success!',
            text: 'Address updated successfully',
            timer: 2000,
            showConfirmButton: false,
            position: 'top-end',
            toast: true
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: data.error || 'Failed to update address'
          });
        }
      })
      .catch(error => {
        console.error('Error updating address:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error!',
          text: 'Error updating address: ' + error.message
        });
      });
  });
</script>

<%- include('./footer') %>