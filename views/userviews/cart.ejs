<%- include('./header') %>
<style>
  body {
    background: #f5f5f5;
    min-height: 100vh;
    font-family: 'Open Sans', sans-serif;
    font-size: 0.9rem;
    font-weight: 600;
  }
  .container {
    padding-top: 100px;
    padding-bottom: 2rem;
  }
  .card {
    margin: 2rem auto;
    max-width: 1000px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  .cart {
    padding: 2rem;
    border-radius: 12px 0 0 12px;
    background: #fff;
  }
  .summary {
    background: #e8ecef;
    padding: 2rem;
    border-radius: 0 12px 12px 0;
    color: #333;
  }
  .title {
    margin-bottom: 2rem;
  }
  .title h4 {
    color: rgb(255, 63, 108);
    font-size: 1.5rem;
    font-weight: 700;
  }
  .row {
    margin: 0;
  }
  .main {
    padding: 1.5rem 0;
    align-items: center;
    border-bottom: 1px solid #eee;
  }
  .cart-item img {
    width: 120px;
    height: 120px;
    object-fit: cover;
    border-radius: 8px;
  }
  .quantity-button {
    background: #f5f5f5;
    border: 1px solid #ddd;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    border-radius: 4px;
    transition: background 0.3s ease;
  }
  .quantity-button:hover {
    background: rgb(255, 63, 108);
    color: white;
    border-color: rgb(255, 63, 108);
  }
  .quantity {
    padding: 0 1rem;
    font-size: 1rem;
  }
  .remove-button {
    background: none;
    border: none;
    color: #999;
    font-size: 1.2rem;
    cursor: pointer;
    transition: color 0.3s ease;
  }
  .remove-button:hover {
    color: rgb(255, 63, 108);
  }
  .text-muted {
    color: #666 !important;
  }
  .summary h5 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
  }
  .summary .row {
    margin-bottom: 1rem;
  }
  .btn {
    background: #000;
    color: white;
    font-size: 0.9rem;
    font-weight: 600;
    padding: 0.75rem;
    border-radius: 6px;
    transition: background 0.3s ease, transform 0.2s ease;
  }
  .btn:hover {
    background: rgb(255, 63, 108);
    color: white;
    transform: translateY(-2px);
  }
  .btn:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  .empty-cart {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 300px;
  }
  .empty-cart img {
    width: 100%;
    max-width: 300px;
    height: auto;
    margin-bottom: 1rem;
  }
  .back-to-shop a {
    color: rgb(255, 63, 108);
    font-weight: 600;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  .back-to-shop a:hover {
    color: #000;
  }
  .stock-message {
    color: rgb(200, 0, 255);
    font-size: 0.85rem;
    display: none;
  }
  .stock-message.show {
    display: block;
  }
  .offer-details {
    font-size: 0.85rem;
    color: #666;
  }
  @media (max-width: 767px) {
    .card {
      margin: 1rem;
    }
    .cart {
      border-radius: 12px 12px 0 0;
      padding: 1.5rem;
    }
    .summary {
      border-radius: 0 0 12px 12px;
      padding: 1.5rem;
    }
    .cart-item img {
      width: 100px;
      height: 100px;
    }
    .title h4 {
      font-size: 1.25rem;
    }
    .summary h5 {
      font-size: 1.1rem;
    }
  }
  @media (max-width: 576px) {
    .container {
      padding-top: 90px;
    }
    .cart-item img {
      width: 80px;
      height: 80px;
    }
    .quantity-button {
      padding: 0.3rem 0.8rem;
    }
    .quantity {
      font-size: 0.9rem;
    }
  }
</style>

<div class="container">
  <div class="card">
    <div class="row">
      <div class="col-md-8 cart">
        <div class="title">
          <div class="row">
            <div class="col"><h4><b>Shopping Cart</b></h4></div>
            <div class="col align-self-center text-right text-muted">
              <%= cart && cart.items ? cart.items.length + ' items' : '0 items' %>
            </div>
          </div>
        </div>
        <% if (cart && cart.items && cart.items.length > 0) { %>
          <% cart.items.forEach(item => { %>
            <div class="row main cart-item">
              <div class="col-2">
                <% if (item.product && item.product._id) { %>
                  <a href="/products/<%= item.product._id %>">
                    <img class="img-fluid" src="<%= item.product.images[0] %>">
                  </a>
                <% } %>
              </div>
              <div class="col">
                <div class="row text-muted"><%= item.product.name %></div>
                <% 
                  let displayPrice = item.product.price;
                  let offerDescription = '';
                  const productOffer = productOffers.find(offer => offer.product.toString() === item.product._id.toString() && new Date() >= offer.startDate && new Date() <= offer.expiryDate);
                  if (productOffer) {
                    displayPrice = productOffer.newPrice;
                    offerDescription = `Flat ${productOffer.discountPercentage}% discount`;
                  } else if (item.product.categoryofferprice && item.product.categoryofferprice < item.product.price) {
                    displayPrice = item.product.categoryofferprice;
                    offerDescription = 'Category offer applied';
                  }
                %>
                <div class="row offer-details"><%= offerDescription %></div>
              </div>
              <div class="col">
                <div>
                  <button type="button" class="quantity-button" onclick="updateQuantity('<%= item.product._id %>', -1)">-</button>
                  <span id="quantity_<%= item.product._id %>" class="quantity" max="<%= item.product.stock %>">
                    <%= item.quantity %>
                  </span>
                  <button type="button" class="quantity-button" onclick="updateQuantity('<%= item.product._id %>', 1)">+</button>
                </div>
                <div id="stock-message_<%= item.product._id %>" class="stock-message">
                  (Max stock reached)
                </div>
              </div>
              <div class="col" id="price_<%= item.product._id %>">
                ₹<%= (displayPrice * item.quantity).toFixed(2) %>
                <% if (displayPrice < item.product.price) { %>
                  <span style="text-decoration: line-through;">₹<%= (item.product.price * item.quantity).toFixed(2) %></span>
                <% } %>
                <button type="button" class="remove-button" onclick="removeItem('<%= item.product._id %>')">X</button>
              </div>
            </div>
          <% }); %>
        <% } else { %>
          <div class="empty-cart">
            <img src="/images/emptycart.jpg" alt="Empty Cart Image">
            <div class="back-to-shop">
              <a href="/home">← Back to shop</a>
            </div>
          </div>
        <% } %>
      </div>
      <% if (cart && cart.items && cart.items.length > 0) { %>
        <div class="col-md-4 summary">
          <div><h5><b>Cart Summary</b></h5></div>
          <hr>
          <div class="row">
            <div class="col" style="padding-left:0;">PRICE (<%= cart && cart.items ? cart.items.length : 0 %> ITEMS)</div>
            <div id="totalPrice" class="col text-right">₹<%= data.total.toFixed(2) %></div>
          </div>
          <div class="row" style="border-top: 1px solid rgba(0,0,0,.1); padding: 2vh 0;">
            <div class="col">TOTAL PRICE</div>
            <div class="col text-right">₹<%= data.total.toFixed(2) %></div>
          </div>
          <a id="proceedToCheckoutButton" href='<%= cart && cart.items && cart.items.length > 0 ? "/proceedtocheckout" : "#" %>'>
            <button class="btn" <%= cart && cart.items && cart.items.length === 0 ? 'disabled' : '' %>>PROCEED TO CHECKOUT</button>
          </a>
        </div>
      <% } %>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script>
function updateQuantity(productId, change) {
  const quantityElement = document.getElementById(`quantity_${productId}`);
  const stockMessageElement = document.getElementById(`stock-message_${productId}`);
  const totalPriceElement = document.getElementById('totalPrice');

  const currentQuantity = parseInt(quantityElement.innerText);
  const maxStock = parseInt(quantityElement.getAttribute('max'));

  if (change === -1 && currentQuantity === 1) {
    Swal.fire({
      text: 'Do you want to remove this item from the cart?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, remove it!',
    }).then((result) => {
      if (result.isConfirmed) {
        removeItem(productId);
      }
    });
  } else {
    fetch(`/updateQuantity/${productId}/${change}`, { 
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(err => { throw new Error(err.error); });
      }
      return response.json();
    })
    .then(data => {
      if (data.message === 'Item removed') {
        Swal.fire({
          icon: 'success',
          text: 'Item removed successfully',
          timer: 1500,
          showConfirmButton: false,
        });
        window.location.reload();
      } else {
        // Update quantity
        quantityElement.innerText = data.quantity;

        // Update only cart summary prices
        totalPriceElement.innerText = `₹${data.total.toFixed(2)}`;
        
        // Update the second total price (TOTAL PRICE)
        const totalSummaryRow = document.querySelectorAll('.summary .row');
        totalSummaryRow.forEach(row => {
          if (row.innerText.includes('TOTAL PRICE')) {
            row.querySelector('.col.text-right').innerText = `₹${data.total.toFixed(2)}`;
          }
        });

        // Show or hide stock message
        stockMessageElement.classList.toggle('show', data.quantity >= maxStock);

        // Update individual item price
        const priceElement = document.getElementById(`price_${productId}`);
        priceElement.innerHTML = `₹${data.itemPrice.toFixed(2)}`;
      }
    })
    .catch(error => {
      if (error.message.includes('available in stock')) {
        stockMessageElement.classList.add('show');
        Swal.fire({
          icon: 'error',
          text: error.message,
        });
      } else {
        Swal.fire({
          icon: 'error',
          text: 'An error occurred while updating quantity. Please try again.',
        });
      }
    });
  }
}

function removeItem(productId) {
  fetch(`/removeItem/${productId}`, { 
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    }
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Failed to remove item ${productId}`);
      }
      return response.json();
    })
    .then(data => {
      Swal.fire({
        icon: 'success',
        text: 'Item removed successfully',
        timer: 1500,
        showConfirmButton: false,
      });
      window.location.reload();
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Failed to remove item. Please try again.',
      });
    });
}
</script>

<%- include('./footer') %>
